<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Niu Zhiqiang&#39;s blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://niuzhiqiang90.coding.me/"/>
  <updated>2017-08-30T14:10:53.994Z</updated>
  <id>http://niuzhiqiang90.coding.me/</id>
  
  <author>
    <name>Niu Zhiqiang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git bisect</title>
    <link href="http://niuzhiqiang90.coding.me/2017/08/30/git-bisect/"/>
    <id>http://niuzhiqiang90.coding.me/2017/08/30/git-bisect/</id>
    <published>2017-08-30T14:06:12.000Z</published>
    <updated>2017-08-30T14:10:53.994Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git-bisect"><a href="#git-bisect" class="headerlink" title="git bisect"></a>git bisect</h1><p>在提交了多次代码后，发现代码不能正确运行了，但是很确定的是某一个commit是好使的，比如昨天晚上或者上午的某次提交是可以正确运行的，这个时候可以通过<code>git bisect</code>来通过二分查找出问题的那次提交</p>
<h2 id="1-开始"><a href="#1-开始" class="headerlink" title="1. 开始"></a>1. 开始</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git bisect start</div></pre></td></tr></table></figure>
<h2 id="2-标记当前的HEAD为bad"><a href="#2-标记当前的HEAD为bad" class="headerlink" title="2.标记当前的HEAD为bad"></a>2.标记当前的HEAD为bad</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git bisect bad</div></pre></td></tr></table></figure>
<h2 id="3-标记最近一次可以正确运行的commit为good"><a href="#3-标记最近一次可以正确运行的commit为good" class="headerlink" title="3.标记最近一次可以正确运行的commit为good"></a>3.标记最近一次可以正确运行的commit为good</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git bisect good &lt;commit-id&gt;</div></pre></td></tr></table></figure>
<h2 id="4-检查中间的那次提交状态是正确还是错误"><a href="#4-检查中间的那次提交状态是正确还是错误" class="headerlink" title="4.检查中间的那次提交状态是正确还是错误"></a>4.检查中间的那次提交状态是正确还是错误</h2><ul>
<li>如果是正确，标记为good<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git bisect good</div></pre></td></tr></table></figure>
</li>
</ul>
<p>这时候，git会从这个good到最初标记的bad进行二分查找</p>
<ul>
<li>如果是出错的，标记为bad<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git bisect bad</div></pre></td></tr></table></figure>
</li>
</ul>
<p>这时候，git会从这个bad到最初标记的good位置进行二分查找</p>
<h2 id="5-重复步骤4"><a href="#5-重复步骤4" class="headerlink" title="5.重复步骤4"></a>5.重复步骤4</h2><p>即可找到最初的bad是在哪次commit不小心引入的。</p>
<h2 id="6-结束"><a href="#6-结束" class="headerlink" title="6.结束"></a>6.结束</h2><p>查找到引入bug的commit之后，回到最初的HEAD<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git bisect reset</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;git-bisect&quot;&gt;&lt;a href=&quot;#git-bisect&quot; class=&quot;headerlink&quot; title=&quot;git bisect&quot;&gt;&lt;/a&gt;git bisect&lt;/h1&gt;&lt;p&gt;在提交了多次代码后，发现代码不能正确运行了，但是很确定的是某一个commit
    
    </summary>
    
    
      <category term="git" scheme="http://niuzhiqiang90.coding.me/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>website enable ssl</title>
    <link href="http://niuzhiqiang90.coding.me/2017/08/09/website-enable-ssl/"/>
    <id>http://niuzhiqiang90.coding.me/2017/08/09/website-enable-ssl/</id>
    <published>2017-08-09T12:33:10.000Z</published>
    <updated>2017-08-30T13:49:17.625Z</updated>
    
    <content type="html"><![CDATA[<h1 id="website-enable-ssl"><a href="#website-enable-ssl" class="headerlink" title="website enable ssl"></a>website enable ssl</h1><h2 id="1-nginx-enable-ssl"><a href="#1-nginx-enable-ssl" class="headerlink" title="1. nginx enable ssl"></a>1. nginx enable ssl</h2><p>网站启用ssl需要nginx ssl 模块的支持</p>
<h3 id="1-1-查看nginx是否编译了ssl模块"><a href="#1-1-查看nginx是否编译了ssl模块" class="headerlink" title="1.1 查看nginx是否编译了ssl模块"></a>1.1 查看nginx是否编译了ssl模块</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nginx -V</div></pre></td></tr></table></figure>
<h3 id="1-2-编译ssl模块"><a href="#1-2-编译ssl模块" class="headerlink" title="1.2 编译ssl模块"></a>1.2 编译ssl模块</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd nginx/src/dir</div><div class="line">./configure --with-http_ssl_module</div><div class="line">make &amp;&amp; make install</div></pre></td></tr></table></figure>
<h2 id="2-启用ssl"><a href="#2-启用ssl" class="headerlink" title="2. 启用ssl"></a>2. 启用ssl</h2><h3 id="2-1-生成证书"><a href="#2-1-生成证书" class="headerlink" title="2.1 生成证书"></a>2.1 生成证书</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">sudo openssl genrsa -des3 -out server.key 2048</div><div class="line">sudo openssl req -new -key server.key -out server.csr</div><div class="line">sudo cp server.key server.key.org</div><div class="line">sudo openssl rsa -in server.key.org -out server.key</div><div class="line">sudo openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt</div></pre></td></tr></table></figure>
<h2 id="2-2-在server区域，指定证书位置"><a href="#2-2-在server区域，指定证书位置" class="headerlink" title="2.2 在server区域，指定证书位置"></a>2.2 在server区域，指定证书位置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ssl_certificate /dir/server.crt;</div><div class="line">ssl_certificate_key /dir/server.key;</div></pre></td></tr></table></figure>
<h2 id="2-3-修改监听的端口号"><a href="#2-3-修改监听的端口号" class="headerlink" title="2.3 修改监听的端口号"></a>2.3 修改监听的端口号</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">listen       443 ssl; </div><div class="line">server_name  ssl.test.cn;</div></pre></td></tr></table></figure>
<h2 id="2-4-将http的访问redirect到https"><a href="#2-4-将http的访问redirect到https" class="headerlink" title="2.4 将http的访问redirect到https"></a>2.4 将http的访问redirect到https</h2><p>在http区域添加如下内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">       listen       80;</div><div class="line">       server_name  ssl.test.cn;;</div><div class="line">       return 301 https://ssl.test.cn:443$request_uri;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="2-5-重启或者reloadnginx"><a href="#2-5-重启或者reloadnginx" class="headerlink" title="2.5 重启或者reloadnginx"></a>2.5 重启或者reloadnginx</h2><h2 id="2-6-测试"><a href="#2-6-测试" class="headerlink" title="2.6 测试"></a>2.6 测试</h2><p>访问<a href="http://ssl.test.cn" target="_blank" rel="external">http://ssl.test.cn</a><br>已经会自动跳转到<a href="https://ssl.test.cn" target="_blank" rel="external">https://ssl.test.cn</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;website-enable-ssl&quot;&gt;&lt;a href=&quot;#website-enable-ssl&quot; class=&quot;headerlink&quot; title=&quot;website enable ssl&quot;&gt;&lt;/a&gt;website enable ssl&lt;/h1&gt;&lt;h2 id=&quot;1
    
    </summary>
    
    
      <category term="nginx" scheme="http://niuzhiqiang90.coding.me/tags/nginx/"/>
    
      <category term="ssl" scheme="http://niuzhiqiang90.coding.me/tags/ssl/"/>
    
  </entry>
  
  <entry>
    <title>linux系统监控基本命令</title>
    <link href="http://niuzhiqiang90.coding.me/2017/03/25/linux%E7%B3%BB%E7%BB%9F%E7%9B%91%E6%8E%A7%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
    <id>http://niuzhiqiang90.coding.me/2017/03/25/linux系统监控基本命令/</id>
    <published>2017-03-25T09:09:57.000Z</published>
    <updated>2017-03-27T13:25:05.932Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-nmon软件"><a href="#1-nmon软件" class="headerlink" title="1. nmon软件"></a>1. nmon软件</h2><h3 id="1-1-运行nmon软件"><a href="#1-1-运行nmon软件" class="headerlink" title="1.1 运行nmon软件"></a>1.1 运行nmon软件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">:~$ nmon</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">┌nmon─14g──────[H for help]───Hostname=localhost────Refresh= 2secs ───16:48.29────────────────────────┐</div><div class="line">------------------------------       For help type H or ...                                           │</div><div class="line">│  #    #  #    #   ####   #    #        nmon -?  - hint                                              │</div><div class="line">│  ##   #  ##  ##  #    #  ##   #        nmon -h  - full                                              │</div><div class="line">│  # #  #  # ## #  #    #  # #  #                                                                     │</div><div class="line">│  #  # #  #    #  #    #  #  # #       To start the same way every time                              │</div><div class="line">│  #   ##  #    #  #    #  #   ##        set the NMON ksh variable                                    │</div><div class="line">│  #    #  #    #   ####   #    #                                                                     │</div><div class="line">│  ------------------------------                                                                     │</div><div class="line">│                                                                                                     │</div><div class="line">│  Use these keys to toggle statistics on/off:                                                        │</div><div class="line">│     c = CPU        l = CPU Long-term   - = Faster screen updates                                    │</div><div class="line">│     m = Memory     j = Filesystems     + = Slower screen updates                                    │</div><div class="line">│     d = Disks      n = Network         V = Virtual Memory                                           │</div><div class="line">│     r = Resource   N = NFS             v = Verbose hints                                            │</div><div class="line">│     k = kernel     t = Top-processes   . = only busy disks/procs                                    │</div><div class="line">│     h = more options                 q = Quit                                                       │</div><div class="line">│─────────────────────────────────────────────────────────────────────────────────────────────────────│</div></pre></td></tr></table></figure>
<h3 id="1-2-显示CPU信息"><a href="#1-2-显示CPU信息" class="headerlink" title="1.2 显示CPU信息"></a>1.2 显示CPU信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">│ CPU Utilisation ──────────────────────────────────────────────────────────────</div><div class="line">│---------------------------+-------------------------------------------------+</div><div class="line">│CPU  User%  Sys% Wait% Idle|0          |25         |50          |75       100|</div><div class="line">│  1  15.2   1.5   0.0  83.2|UUUUUUU           &gt;                              |</div><div class="line">│  2   7.1   2.6   0.0  90.3|UUUs             &gt;                               |</div><div class="line">│  3  17.5   1.0   0.5  81.0|UUUUUUUU        &gt;                                |</div><div class="line">│  4  13.6   3.0   0.0  83.3|UUUUUUs            &gt;                             |</div><div class="line">│---------------------------+-------------------------------------------------+</div><div class="line">│Avg  13.4   2.1   0.3  84.3|UUUUUUs        &gt;                                 |</div><div class="line">│---------------------------+-------------------------------------------------+</div></pre></td></tr></table></figure>
<h3 id="1-3-显示内存信息"><a href="#1-3-显示内存信息" class="headerlink" title="1.3 显示内存信息"></a>1.3 显示内存信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">│ Memory Stats ──────────────────────────────────────────────────────────────────</div><div class="line">                RAM     High      Low     Swap    Page Size=4 KB</div><div class="line">│ Total MB      7843.5     -0.0     -0.0   3916.0</div><div class="line">│ Free  MB      1259.8     -0.0     -0.0   3915.6</div><div class="line">│ Free Percent    16.1%   100.0%   100.0%   100.0%</div><div class="line">│             MB                  MB                  MB</div><div class="line">│                      Cached=  2912.7     Active=  3842.7</div><div class="line">│ Buffers=   929.4 Swapcached=     0.0  Inactive =  1789.8</div><div class="line">│ Dirty  =     0.1 Writeback =     0.0  Mapped   =   946.5</div><div class="line">│ Slab   =   799.7 Commit_AS =  6624.9 PageTables=    40.2</div></pre></td></tr></table></figure>
<h3 id="1-4-显示磁盘信息"><a href="#1-4-显示磁盘信息" class="headerlink" title="1.4 显示磁盘信息"></a>1.4 显示磁盘信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"> Disk I/O ──/proc/diskstats────mostly in KB/s─────Warning:contains duplicates────</div><div class="line">│DiskName Busy  Read WriteKB|0          |25         |50          |75       100|</div><div class="line">│sda        5%    0.0   42.0|WW&gt;                                              |</div><div class="line">│sda1       0%    0.0    0.0|&gt;                                                |</div><div class="line">│sda2       0%    0.0    0.0|&gt;                                                |</div><div class="line">│sda5       5%    0.0   42.0|WW&gt;                                              |</div><div class="line">│sda6       0%    0.0    0.0|&gt;                                                |</div><div class="line">│Totals Read-MB/s=0.0      Writes-MB/s=0.1      Transfers/sec=12.0</div></pre></td></tr></table></figure>
<h3 id="1-5-显示网络信息"><a href="#1-5-显示网络信息" class="headerlink" title="1.5 显示网络信息"></a>1.5 显示网络信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"> Network I/O ────────────────────────────────────────────────────────────────────</div><div class="line">│I/F Name Recv=KB/s Trans=KB/s packin packout insize outsize Peak-&gt;Recv Trans </div><div class="line">│      lo     0.0     0.0       0.0      0.0     0.0    0.0        0.0     0.0 </div><div class="line">│   wlan0     0.1     0.0       0.5      0.0   215.0    0.0        0.1     0.0 </div><div class="line">│ docker0     0.0     0.0       0.0      0.0     0.0    0.0        0.0     0.0 </div><div class="line">│    eth0     0.0     0.0       0.0      0.0     0.0    0.0        0.0     0.0</div><div class="line">│ Network Error Counters ─────────────────────────────────────────────────────────</div><div class="line">│I/F Name iErrors iDrop iOverrun iFrame oErrors   oDrop oOverrun oCarrier oColls</div><div class="line">│      lo       0       0       0       0       0       0       0       0       0</div><div class="line">│   wlan0       0       0       0       0       0       0       0       0       0</div><div class="line">│ docker0       0       0       0       0       0       0       0       0       0</div><div class="line">│    eth0       0       0       0       0       0       0       0       0       0</div></pre></td></tr></table></figure>
<h3 id="1-6-显示内核信息"><a href="#1-6-显示内核信息" class="headerlink" title="1.6 显示内核信息"></a>1.6 显示内核信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Kernel Stats ────────────────────────────────────────────────────────────────────</div><div class="line">│ RunQueue              3   Load Average    CPU use since boot time</div><div class="line">│ ContextSwitch    2735.0    1 mins  0.54    Uptime Days=  0 Hours= 7 Mins=58</div><div class="line">│ Forks               0.5    5 mins  0.86    Idle   Days=  1 Hours= 1 Mins=36</div><div class="line">│ Interrupts        836.9   15 mins  0.92    Average CPU use=-221.51%</div></pre></td></tr></table></figure>
<h2 id="2-ethstatus"><a href="#2-ethstatus" class="headerlink" title="2. ethstatus"></a>2. ethstatus</h2><p><code>ethstatus</code>可以实时监控网卡的带宽占用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">───────────────────.EthStatus v0.4a.──────────────────────────────[0/910]──────────────────────│</div><div class="line">│                                                                                              │</div><div class="line">│                                                                                              │</div><div class="line">│                      ######                                                                  │</div><div class="line">│                                                                                              │</div><div class="line">│         ###                                                                                  │</div><div class="line">│        ON/OFF                      RX  TX                                                    │</div><div class="line">│                            0.00 B/s   0 Packets/s                                            │</div><div class="line">│                                                                                              │</div><div class="line">│                                                                                              │</div><div class="line">│     IP Address:          192.168.1.116                                                       │</div><div class="line">│     Interface name:      wlan0         Graphic Using Speed:    9.77 MB/s                     │</div><div class="line">│     Top Speed:           732.00 B/s    Top Packets/s:          5                             │</div><div class="line">│     Received Packets:    593428        Transmited Packets:     437965                        │</div><div class="line">│     Received:            399.68 MB     Transmitted:            54.73 MB                      │</div><div class="line">│     Errors on Receiving: 0             Errors on Transmission: 0                             │</div><div class="line">│                                                                                              │</div><div class="line">│                                                                                              │</div></pre></td></tr></table></figure>
<h2 id="3-iftop监控网卡实时流量"><a href="#3-iftop监控网卡实时流量" class="headerlink" title="3. iftop监控网卡实时流量"></a>3. iftop监控网卡实时流量</h2><p>常用参数列表</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>含义</th>
<th>例子</th>
</tr>
</thead>
<tbody>
<tr>
<td>-i</td>
<td>指定需要监测的网卡</td>
<td>sudo iftop -i wlan0</td>
</tr>
<tr>
<td>-n</td>
<td>将输出的主机信息都通过ip显示，不进行DNS方向解析</td>
<td>sudo iftop -n -i wlan0</td>
</tr>
<tr>
<td>-B</td>
<td>将输出以byte为单位显示网卡流量，默认是bit</td>
<td>sudo iftop -B -i wlan0</td>
</tr>
<tr>
<td>-p</td>
<td>以混杂模式运行iftop,此时iftop可以作为网络嗅探器</td>
<td>sudo iftop -p -i wlan0</td>
</tr>
<tr>
<td>-N</td>
<td>只显示链接端口号，不显示对应的服务名称</td>
<td>sudo iftop -N -i wlan0</td>
</tr>
<tr>
<td>-P</td>
<td>显示主机及端口信息</td>
<td>sudo iftop -P -i wlan0</td>
</tr>
<tr>
<td>-F</td>
<td>显示特定网段的网卡进出流量</td>
<td>sudo iftop -F 192.168.1.10/24</td>
</tr>
</tbody>
</table>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">                    12.5kb              25.0kb               37.5kb              50.0kb         [0/37]</div><div class="line">+-------------------+-------------------+--------------------+-------------------+--------------------</div><div class="line">192.168.1.116                         =&gt; 101.227.160.102                       17.6kb  3.55kb  1.90kb </div><div class="line">                                      &lt;=                                       7.29kb  1.50kb   807b</div><div class="line">224.0.0.251                           =&gt; 192.168.1.165                            0b      0b      0b  </div><div class="line">                                      &lt;=                                       1.72kb  2.21kb   566b</div><div class="line">192.168.1.116                         =&gt; 140.206.160.161                       4.89kb  0.98kb  1.21kb</div><div class="line">                                      &lt;=                                       1.18kb   242b    302b</div><div class="line">192.168.1.116                         =&gt; 192.168.1.1                              0b    112b     96b  </div><div class="line">                                      &lt;=                                          0b    378b    254b</div><div class="line">239.255.255.250                       =&gt; 192.168.1.148                            0b      0b      0b</div><div class="line">                                      &lt;=                                       1.19kb   486b    730b</div><div class="line">224.0.0.251                           =&gt; 192.168.1.166                            0b      0b      0b</div><div class="line">                                      &lt;=                                        272b     54b     14b</div><div class="line">192.168.1.165                         =&gt; all-routers.mcast.net                    0b     26b      6b</div><div class="line">                                      &lt;=                                          0b      0b      0b</div><div class="line">192.168.1.116                         =&gt; 101.226.76.164                           0b      0b   2.11kb</div><div class="line">                                      &lt;=                                          0b      0b    752b  </div><div class="line">192.168.1.116                         =&gt; dev                                      0b      0b   1.50kb</div><div class="line">                                      &lt;=                                          0b      0b    544b</div><div class="line">192.168.1.116                         =&gt; stage                                    0b      0b   1.40kb</div><div class="line">                                      &lt;=                                          0b      0b    504b</div><div class="line">239.255.255.250                       =&gt; 192.168.1.135                            0b      0b      0b</div><div class="line">                                      &lt;=                                          0b      0b    161b</div><div class="line">239.255.255.250                       =&gt; 192.168.1.113                            0b      0b      0b</div><div class="line">                                      &lt;=                                          0b      0b    160b</div><div class="line">------------------------------------------------------------------------------------------------------</div><div class="line">TX:             cum:   51.5kB   peak:   44.7kb                        rates:   22.4kb  4.64kb  8.27kb</div><div class="line">RX:                    46.8kB           28.5kb                                 11.6kb  4.87kb  4.94kb</div><div class="line">TOTAL:                 98.4kB           73.2kb                                 34.1kb  9.51kb  13.2kb</div></pre></td></tr></table></figure>
<h2 id="4-mtr"><a href="#4-mtr" class="headerlink" title="4. mtr"></a>4. mtr</h2><p>mtr是Linux中有一个非常棒的网络连通性判断工具,它结合了<code>ping</code>，<code>traceroute</code>，<code>nslookup</code>的相关特性。<br>相对于其他命令仅仅收集传输路径或响应时间，MTR 工具会收集更多的信息，比如 连接状态，连接可用性，以及传输路径中主机的响应性。</p>
<p>常用参数</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-s</td>
<td>用来指定ping数据包的大小</td>
</tr>
<tr>
<td><code>--no-dns</code></td>
<td>不对IP地址做域名解析</td>
</tr>
<tr>
<td>-a</td>
<td>使用这个参数来设置ICMP返回之间的要求默认是1秒</td>
</tr>
<tr>
<td><code>--report</code></td>
<td>给主机发送10个ICMP包，然后输出报告</td>
</tr>
</tbody>
</table>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">                    My traceroute  [v0.85]                                     [0/102]</div><div class="line">localhost (0.0.0.0)                            Sun Mar 26 20:25:43 2017</div><div class="line">Keys:  Help   Display mode   Restart statistics   Order of fields   quit</div><div class="line">                                            Packets               Pings</div><div class="line"> Host                                    Loss%   Snt   Last   Avg  Best  Wrst StDev</div><div class="line"> 1. 192.168.0.1                           0.0%     8    1.5   2.3   1.3   4.3   0.8</div><div class="line"> 2. 192.168.1.1                           0.0%     8    1.7   4.6   1.7  13.7   5.2</div><div class="line"> 3. 114.245.248.1                         0.0%     8   78.3 108.3   3.7 363.8 149.8</div><div class="line"> 4. 123.126.26.45                         0.0%     8    7.9  19.6   3.8  76.7  26.3</div><div class="line"> 5. 61.148.158.53                         0.0%     8    7.2  12.2   5.1  31.6   9.2</div><div class="line"> 6. 61.51.115.106                         0.0%     8   78.8  15.4   4.6  78.8  25.7</div><div class="line"> 7. 61.49.168.110                         0.0%     8    4.9   7.1   4.8  12.8   2.7</div><div class="line"> 8. ???</div><div class="line"> 9. ???</div><div class="line">10. 61.135.169.121                        0.0%     7    4.3   5.9   4.2  10.9   2.2</div></pre></td></tr></table></figure>
<p><strong>说明</strong><br>当分析mtr的输出时，需要注意两点:loss和latency<br>如果你在任何一跳上看到loss的百分比，这就说明这一跳上可能有问题。当然也有可能是服务提供商人为限制了ICMP发送的速率，也会导致丢包。如果下一跳没有丢包，那说明该丢包是人为限制的。<br>如果第4跳和第5跳都有50%的丢包率，从接下来的几跳都有丢包现象，所以不像是人为限制 ICMP 速率的原因。但是最后几跳都是30%的丢包率，我们可以猜测30%的丢包率除了网络糟糕的原因之前还有人为限制ICMP。所以，当我们看到不同的丢包率时，通常要以最后几跳为准。当出现短暂的10%丢包率的时候，不必担心，应用层的程序会弥补这点损失。</p>
<h2 id="5-htop"><a href="#5-htop" class="headerlink" title="5. htop"></a>5. htop</h2><p>常用功能键</p>
<table>
<thead>
<tr>
<th>按键</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>F1</td>
<td>帮助</td>
</tr>
<tr>
<td>F2</td>
<td>设置</td>
</tr>
<tr>
<td>F3</td>
<td>搜索进程</td>
</tr>
<tr>
<td>F4</td>
<td>过滤器，按关键字搜索</td>
</tr>
<tr>
<td>F5</td>
<td>显示树形结构</td>
</tr>
<tr>
<td>F6</td>
<td>选择排序方式</td>
</tr>
<tr>
<td>F7</td>
<td>减少nice值，可以提高对应进程的优先级</td>
</tr>
<tr>
<td>F8</td>
<td>增加nice值，可以降低对应进程的优先级</td>
</tr>
<tr>
<td>F9</td>
<td>杀掉选中的进程</td>
</tr>
<tr>
<td>F10</td>
<td>退出</td>
</tr>
<tr>
<td>/</td>
<td>搜索字符</td>
</tr>
<tr>
<td>h</td>
<td>显示帮助</td>
</tr>
<tr>
<td>l</td>
<td>显示进程打开的文件 lsof</td>
</tr>
<tr>
<td>u</td>
<td>显示所有用户，并可以选择某一特定用户的进程</td>
</tr>
<tr>
<td>s</td>
<td>将调用strace追踪进程的系统调用</td>
</tr>
<tr>
<td>t</td>
<td>显示树形结构</td>
</tr>
<tr>
<td>H</td>
<td>显示/隐藏用户线程</td>
</tr>
<tr>
<td>I</td>
<td>倒转排序</td>
</tr>
<tr>
<td>K</td>
<td>显示/隐藏内核线程</td>
</tr>
<tr>
<td>M</td>
<td>按内存占用排序</td>
</tr>
<tr>
<td>P</td>
<td>按CPU排序</td>
</tr>
<tr>
<td>T</td>
<td>按运行时间排序</td>
</tr>
</tbody>
</table>
<p>htop的左上角显示CPU、内存、交换区的使用情况，右边显示任务、负载、开机时间，下面是进程实时状态。<br>最后一行是F1～F10的功能菜单和对应的字符快捷键。</p>
<h2 id="6-linux系统性能分析"><a href="#6-linux系统性能分析" class="headerlink" title="6. linux系统性能分析"></a>6. linux系统性能分析</h2><p>分析次序为cpu mem disk network</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-nmon软件&quot;&gt;&lt;a href=&quot;#1-nmon软件&quot; class=&quot;headerlink&quot; title=&quot;1. nmon软件&quot;&gt;&lt;/a&gt;1. nmon软件&lt;/h2&gt;&lt;h3 id=&quot;1-1-运行nmon软件&quot;&gt;&lt;a href=&quot;#1-1-运行nmon软件&quot; c
    
    </summary>
    
    
      <category term="linux" scheme="http://niuzhiqiang90.coding.me/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>python字符串处理</title>
    <link href="http://niuzhiqiang90.coding.me/2017/03/23/python%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/"/>
    <id>http://niuzhiqiang90.coding.me/2017/03/23/python字符串处理/</id>
    <published>2017-03-23T13:49:45.000Z</published>
    <updated>2017-03-23T14:29:58.262Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-字符串处理函数"><a href="#1-字符串处理函数" class="headerlink" title="1. 字符串处理函数"></a>1. 字符串处理函数</h2><table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>s.find(substring,[start[,end]])</td>
<td>查找子字符串，可以指定开始结束的位置，返回索引值，否则返回-1</td>
</tr>
<tr>
<td>s.rfind(substring,[start[,end]])</td>
<td>反向查找字符串</td>
</tr>
<tr>
<td>s.index(substring,[start[,end]])</td>
<td>同find，找不到产生ValueError异常</td>
</tr>
<tr>
<td>s.rindex(substring,[start[,end]])</td>
<td>同反向查找</td>
</tr>
<tr>
<td>s.count(substring,[start[,end]])</td>
<td>返回找到子串的个数</td>
</tr>
<tr>
<td>s.lowercase()</td>
<td>所有字符转换成小写</td>
</tr>
<tr>
<td>s.capitalize()</td>
<td>首字母转换成大写</td>
</tr>
<tr>
<td>s.lower()</td>
<td>所有字符转换成小写</td>
</tr>
<tr>
<td>s.upper()</td>
<td>所有字符转换成大写</td>
</tr>
<tr>
<td>s.swapcase()</td>
<td>大小写互换</td>
</tr>
<tr>
<td>s.split(str,’’)</td>
<td>将string转换成list，以空格分割</td>
</tr>
<tr>
<td>s.join(list,’’)</td>
<td>将list转换成string,以空格连接</td>
</tr>
</tbody>
</table>
<p><strong>处理字符串的内置函数</strong></p>
<table>
<thead>
<tr>
<th>函数名</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>len(str)</td>
<td>串长度</td>
</tr>
<tr>
<td>cmp(‘first_str’,str)</td>
<td>字符串比较，第一个大，返回1</td>
</tr>
<tr>
<td>max(‘string’)</td>
<td>寻找字符串中最大的字符</td>
</tr>
<tr>
<td>min(‘string’)</td>
<td>寻找字符串中最小的字符</td>
</tr>
</tbody>
</table>
<h2 id="2-实例"><a href="#2-实例" class="headerlink" title="2. 实例"></a>2. 实例</h2><h3 id="2-1-查找子字符串"><a href="#2-1-查找子字符串" class="headerlink" title="2.1 查找子字符串"></a>2.1 查找子字符串</h3><p><code>s.find()</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; string = &quot;this is the test string&quot;</div><div class="line">&gt;&gt;&gt; string.find(&apos;test&apos;)</div><div class="line">12</div></pre></td></tr></table></figure>
<h3 id="2-2-查找子字符串"><a href="#2-2-查找子字符串" class="headerlink" title="2.2 查找子字符串"></a>2.2 查找子字符串</h3><p><code>s.index()</code><br>找不到就报错，找到就返回索引<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; string = &quot;this is the test string&quot;</div><div class="line">&gt;&gt;&gt; string.index(&apos;error&apos;)</div><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</div><div class="line">ValueError: substring not found</div><div class="line">&gt;&gt;&gt; string.index(&apos;test&apos;)</div><div class="line">12</div></pre></td></tr></table></figure></p>
<h3 id="2-3-首字母转换成大写"><a href="#2-3-首字母转换成大写" class="headerlink" title="2.3 首字母转换成大写"></a>2.3 首字母转换成大写</h3><p><code>s.capitalize()</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; string = &quot;this is the test string&quot;</div><div class="line">&gt;&gt;&gt; string.capitalize()</div><div class="line">&apos;This is the test string&apos;</div></pre></td></tr></table></figure>
<h3 id="2-4-字符串转换成大写"><a href="#2-4-字符串转换成大写" class="headerlink" title="2.4 字符串转换成大写"></a>2.4 字符串转换成大写</h3><p><code>s.upper()</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; string.upper()</div><div class="line">&apos;THIS IS THE TEST STRING&apos;</div></pre></td></tr></table></figure>
<h3 id="2-5-字符串转换成小写"><a href="#2-5-字符串转换成小写" class="headerlink" title="2.5 字符串转换成小写"></a>2.5 字符串转换成小写</h3><p><code>s.lower()</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; string.lower()</div><div class="line">&apos;this is the test string&apos;</div></pre></td></tr></table></figure>
<h3 id="2-6-大小写互换"><a href="#2-6-大小写互换" class="headerlink" title="2.6 大小写互换"></a>2.6 大小写互换</h3><p><code>s.swapcase()</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; string += &quot;THIS IS CAP&quot;</div><div class="line">&gt;&gt;&gt; string</div><div class="line">&apos;this is the test stringTHIS IS CAP&apos;</div><div class="line">&gt;&gt;&gt; string.swapcase()</div><div class="line">&apos;THIS IS THE TEST STRINGthis is cap&apos;</div></pre></td></tr></table></figure>
<h3 id="2-7-将string转换为list"><a href="#2-7-将string转换为list" class="headerlink" title="2.7 将string转换为list"></a>2.7 将string转换为list</h3><p><code>s.split()</code><br>默认为空格，可以指定分隔符<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; string.split()</div><div class="line">[&apos;this&apos;, &apos;is&apos;, &apos;the&apos;, &apos;test&apos;, &apos;stringTHIS&apos;, &apos;IS&apos;, &apos;CAP&apos;]</div></pre></td></tr></table></figure></p>
<h3 id="2-8-将list转换为string"><a href="#2-8-将list转换为string" class="headerlink" title="2.8 将list转换为string"></a>2.8 将list转换为string</h3><p><code>s.join()</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; &apos;|&apos;.join(string.split())</div><div class="line">&apos;this|is|the|test|stringTHIS|IS|CAP&apos;</div></pre></td></tr></table></figure></p>
<p><strong>拓展</strong><br><code>+=</code>和<code>.join</code>实现的效果是一样的，但是<code>+=</code>每次都会新开辟空间，但是<code>.join</code>不用<br>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; a = &apos;the&apos;</div><div class="line">&gt;&gt;&gt; a += &apos; test&apos;</div><div class="line">&gt;&gt;&gt; a += &apos; is&apos;</div><div class="line">&gt;&gt;&gt; a += &apos; end&apos;</div><div class="line">&gt;&gt;&gt; a</div><div class="line">&apos;the test is end&apos;</div><div class="line"></div><div class="line">&gt;&gt;&gt; &apos;&apos;.join(a)</div><div class="line">&apos;the test is end&apos;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-字符串处理函数&quot;&gt;&lt;a href=&quot;#1-字符串处理函数&quot; class=&quot;headerlink&quot; title=&quot;1. 字符串处理函数&quot;&gt;&lt;/a&gt;1. 字符串处理函数&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;函数&lt;/th&gt;
&lt;th&gt;说明&lt;/th
    
    </summary>
    
    
      <category term="python" scheme="http://niuzhiqiang90.coding.me/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python文件处理</title>
    <link href="http://niuzhiqiang90.coding.me/2017/03/22/python%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/"/>
    <id>http://niuzhiqiang90.coding.me/2017/03/22/python文件处理/</id>
    <published>2017-03-22T12:51:07.000Z</published>
    <updated>2017-03-23T13:49:22.090Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-文件操作"><a href="#1-文件操作" class="headerlink" title="1. 文件操作"></a>1. 文件操作</h2><p>file(‘文件名’,’操作符’)<br><strong>省略操作符 默认为读</strong></p>
<table>
<thead>
<tr>
<th>模式</th>
<th>操作符</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>只读</td>
<td><code>r</code></td>
<td>文件必须存在</td>
</tr>
<tr>
<td>只写</td>
<td><code>w</code></td>
<td>文件不存在则创建，文件存在则清空文件内容</td>
</tr>
<tr>
<td>追加</td>
<td><code>a</code></td>
<td>文件不存在则创建，文件存在则在文件末尾添加内容</td>
</tr>
<tr>
<td>读写</td>
<td><code>r+</code></td>
<td></td>
</tr>
<tr>
<td>写读</td>
<td><code>w+</code></td>
<td></td>
</tr>
<tr>
<td>追加</td>
<td><code>a+</code></td>
</tr>
</tbody>
</table>
<p>在python中，以什么样的方式出来文件是比较重要的，如果你<br><strong>以只读的方式打开文件，那你就不能写操作</strong><br><strong>以只写的方式打开文件，那你就不能读操作</strong><br><strong>以追加的方式打开文件，也应该是不能进行读操作的</strong><br><strong><font color="red">操作完毕，不要忘记关闭文件</font></strong></p>
<h3 id="1-1-以只读方式打开文件"><a href="#1-1-以只读方式打开文件" class="headerlink" title="1.1 以只读方式打开文件"></a>1.1 以只读方式打开文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; f = file(&apos;test&apos;,&apos;r&apos;)  #f为该文件对象</div><div class="line">&gt;&gt;&gt; f.readline()</div><div class="line">&apos;hello world\n&apos;</div><div class="line">&gt;&gt;&gt; f.readline()</div><div class="line">&apos;\n&apos;</div><div class="line">&gt;&gt;&gt; f.readline()</div><div class="line">&apos;this is the second line\n&apos;</div><div class="line">&gt;&gt;&gt; f.readline()</div><div class="line">&gt;&gt;&gt; f.close()</div></pre></td></tr></table></figure>
<h3 id="1-2-以只写方式打开文件"><a href="#1-2-以只写方式打开文件" class="headerlink" title="1.2 以只写方式打开文件"></a>1.2 以只写方式打开文件</h3><p><strong>如果文件存在并且有内容，则会把文件之前的内容清除；如果文件不存在。则会创建文件</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; f = file(&apos;test&apos;,&apos;w&apos;)</div><div class="line">&gt;&gt;&gt; f.read()</div><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</div><div class="line">IOError: File not open for reading</div><div class="line"></div><div class="line">&gt;&gt;&gt; f.readline()</div><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</div><div class="line">IOError: File not open for reading</div><div class="line"></div><div class="line">&gt;&gt;&gt; f.write(&apos;this is the newest line&apos;)</div><div class="line">&gt;&gt;&gt; f.close()</div><div class="line">&gt;&gt;&gt; f_read = file(&apos;test&apos;,&apos;r&apos;)</div><div class="line">&gt;&gt;&gt; f_read.read()</div><div class="line">&apos;this is the newest line&apos;</div><div class="line">&gt;&gt;&gt; f_read.read()</div><div class="line">&apos;&apos;</div></pre></td></tr></table></figure></p>
<h3 id="1-3-以追加的方式打开文件"><a href="#1-3-以追加的方式打开文件" class="headerlink" title="1.3 以追加的方式打开文件"></a>1.3 以追加的方式打开文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; f = file(&apos;test&apos;,&apos;a&apos;) </div><div class="line">&gt;&gt;&gt; f.write(&apos;second line&apos;) </div><div class="line">&gt;&gt;&gt; f.write(&apos;\nthird line&apos;)</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<p>这个时候，打开文件，刚才写入的内容并没有写入到文件里。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; f_read = file(&apos;test&apos;,&apos;r&apos;)</div><div class="line">&gt;&gt;&gt; f_read.readline()</div><div class="line">&apos;this is the newest line&apos;</div></pre></td></tr></table></figure></p>
<p><strong>文件在关闭的时候才会写入到文件里</strong>或者<strong>强制写入</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; f.flush()</div></pre></td></tr></table></figure></p>
<p>追加模式也不可以读<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; f.read()</div><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</div><div class="line">IOError: File not open for reading</div></pre></td></tr></table></figure></p>
<p><strong>拓展</strong></p>
<ol>
<li><p>去掉换行符<br><code>line.strip(&#39;换行符&#39;)</code><br>省略换行符默认为空格</p>
</li>
<li><p>把行分割<br><code>line.split(&#39;分隔符&#39;)</code></p>
</li>
</ol>
<h2 id="2-实例"><a href="#2-实例" class="headerlink" title="2. 实例"></a>2. 实例</h2><h3 id="2-1-读取-etc-passwd的内容"><a href="#2-1-读取-etc-passwd的内容" class="headerlink" title="2.1 读取/etc/passwd的内容"></a>2.1 读取<code>/etc/passwd</code>的内容</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">f = file(&apos;/etc/passwd&apos;)</div><div class="line">for line in f.readlines(): #循环文件的每一行 </div><div class="line">    line = line.strip(&apos;\n&apos;).split(&apos;:&apos;) </div><div class="line">    print line</div></pre></td></tr></table></figure>
<p>得到的结果如下<strong>一个列表</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[&apos;root&apos;, &apos;x&apos;, &apos;0&apos;, &apos;0&apos;, &apos;root&apos;, &apos;/root&apos;, &apos;/bin/bash&apos;]</div><div class="line">[&apos;daemon&apos;, &apos;x&apos;, &apos;1&apos;, &apos;1&apos;, &apos;daemon&apos;, &apos;/usr/sbin&apos;, &apos;/usr/sbin/nologin&apos;]</div><div class="line">[&apos;bin&apos;, &apos;x&apos;, &apos;2&apos;, &apos;2&apos;, &apos;bin&apos;, &apos;/bin&apos;, &apos;/usr/sbin/nologin&apos;]</div><div class="line">[&apos;sys&apos;, &apos;x&apos;, &apos;3&apos;, &apos;3&apos;, &apos;sys&apos;, &apos;/dev&apos;, &apos;/usr/sbin/nologin&apos;]</div><div class="line">[&apos;sync&apos;, &apos;x&apos;, &apos;4&apos;, &apos;65534&apos;, &apos;sync&apos;, &apos;/bin&apos;, &apos;/bin/sync&apos;]</div><div class="line">[&apos;games&apos;, &apos;x&apos;, &apos;5&apos;, &apos;60&apos;, &apos;games&apos;, &apos;/usr/games&apos;, &apos;/usr/sbin/nologin&apos;]</div><div class="line">[&apos;man&apos;, &apos;x&apos;, &apos;6&apos;, &apos;12&apos;, &apos;man&apos;, &apos;/var/cache/man&apos;, &apos;/usr/sbin/nologin&apos;]</div></pre></td></tr></table></figure></p>
<p>打印第1列，第2列<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print line[0],line[1]</div></pre></td></tr></table></figure></p>
<h3 id="2-2-写文件"><a href="#2-2-写文件" class="headerlink" title="2.2 写文件"></a>2.2 写文件</h3><p>语言本身不存在文件保护的设置，避免多个程序对同一个文件进行操作，需要自己来完成。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; f.closed</div><div class="line">False</div></pre></td></tr></table></figure></p>
<p><strong>如果<code>f.closed</code>值为False,说明文件已经被打开</strong></p>
<p>显示文件的字符集，默认为ASCII<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; f.encoding</div><div class="line">&gt;&gt;&gt; print f.encoding</div><div class="line">None</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; f = file(&apos;test_coding&apos;,&apos;w&apos;) </div><div class="line">&gt;&gt;&gt; f.write(u&apos;测试文件编码&apos;) </div><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</div><div class="line">UnicodeEncodeError: &apos;ascii&apos; codec can&apos;t encode characters in position 0-5: ordinal not in range(128)</div><div class="line">&gt;&gt;&gt; f.write(u&apos;测试文件编码&apos;.encode(&apos;utf-8&apos;))</div><div class="line">&gt;&gt;&gt; f.flush()</div></pre></td></tr></table></figure>
<p>读到末尾，<code>next()</code>会报错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; f = file(&apos;test_coding&apos;,&apos;r&apos;) </div><div class="line">&gt;&gt;&gt; f.readline()</div><div class="line">&apos;&apos;</div><div class="line">&gt;&gt;&gt; f.next()</div><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</div><div class="line">StopIteration</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure></p>
<h2 id="3-文件操作相关方法"><a href="#3-文件操作相关方法" class="headerlink" title="3. 文件操作相关方法"></a>3. 文件操作相关方法</h2><p>readline是通过next实现的</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>f.readlines()</td>
<td>以列表的形式读出文件</td>
</tr>
<tr>
<td>f.read()</td>
<td>以字符串的形式，一次性读出文件</td>
</tr>
<tr>
<td>f.seek()</td>
<td>跳到文件的指定位置</td>
</tr>
<tr>
<td>f.tell()</td>
<td>当前位置</td>
</tr>
<tr>
<td>f.truncate(100)</td>
<td>从头开始截断文件</td>
</tr>
<tr>
<td>f.writelines()</td>
<td>多行写</td>
</tr>
<tr>
<td>f.xreadlines()</td>
<td>逐行读</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-文件操作&quot;&gt;&lt;a href=&quot;#1-文件操作&quot; class=&quot;headerlink&quot; title=&quot;1. 文件操作&quot;&gt;&lt;/a&gt;1. 文件操作&lt;/h2&gt;&lt;p&gt;file(‘文件名’,’操作符’)&lt;br&gt;&lt;strong&gt;省略操作符 默认为读&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://niuzhiqiang90.coding.me/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python用户交互</title>
    <link href="http://niuzhiqiang90.coding.me/2017/03/20/python%E7%94%A8%E6%88%B7%E4%BA%A4%E4%BA%92/"/>
    <id>http://niuzhiqiang90.coding.me/2017/03/20/python用户交互/</id>
    <published>2017-03-20T14:05:30.000Z</published>
    <updated>2017-03-21T13:16:24.320Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-raw-input"><a href="#1-raw-input" class="headerlink" title="1. raw_input()"></a>1. raw_input()</h2><p>raw_input() 从标准输入中读取一个字符串<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">raw_input(...)</div><div class="line">    raw_input([prompt]) -&gt; string</div><div class="line">    </div><div class="line">    Read a string from standard input.  The trailing newline is stripped.</div><div class="line">    If the user hits EOF (Unix: Ctl-D, Windows: Ctl-Z+Return), raise EOFError.</div><div class="line">    On Unix, GNU readline is used if enabled.  The prompt string, if given,</div><div class="line">    is printed without a trailing newline before reading.</div></pre></td></tr></table></figure></p>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">name = raw_input(&apos;Please input your name:&apos;)</div><div class="line">age = raw_input(&apos;age:&apos;)</div><div class="line">print &quot;name: &quot; % name</div><div class="line">print &quot;age:&quot; % age</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">name = raw_input(&apos;Please input your name:&apos;)</div><div class="line">age = raw_input(&apos;age:&apos;)</div><div class="line">job = raw_input(&apos;Job:&apos;)</div><div class="line">salary = raw_input(&apos;Salary:&apos;)</div><div class="line"></div><div class="line">print &apos;&apos;&apos;</div><div class="line">Personal information of %s:</div><div class="line">   Name : %s</div><div class="line">   Age  : %s     d只能输入数字 f只能输入浮点型</div><div class="line">    Job : %s</div><div class="line">  Salary: %s</div><div class="line">&apos;&apos;&apos; %(name, name, age, job, salary)</div></pre></td></tr></table></figure>
<h2 id="2-input"><a href="#2-input" class="headerlink" title="2. input()"></a>2. input()</h2><p>input()    输入的是什么就是什么格式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">input(...)</div><div class="line">    input([prompt]) -&gt; value</div><div class="line">    </div><div class="line">    Equivalent to eval(raw_input(prompt)).</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; info = &quot;This var will be printed out ...&quot;</div><div class="line">&gt;&gt;&gt; age = input(&apos;age:&apos;)</div><div class="line">age:info</div><div class="line">&gt;&gt;&gt; print age</div><div class="line">This var will be printed out ...</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-raw-input&quot;&gt;&lt;a href=&quot;#1-raw-input&quot; class=&quot;headerlink&quot; title=&quot;1. raw_input()&quot;&gt;&lt;/a&gt;1. raw_input()&lt;/h2&gt;&lt;p&gt;raw_input() 从标准输入中读取一个字符串&lt;br
    
    </summary>
    
    
      <category term="python" scheme="http://niuzhiqiang90.coding.me/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python使用和导入模块</title>
    <link href="http://niuzhiqiang90.coding.me/2017/03/20/python%E4%BD%BF%E7%94%A8%E5%92%8C%E5%AF%BC%E5%85%A5%E6%A8%A1%E5%9D%97/"/>
    <id>http://niuzhiqiang90.coding.me/2017/03/20/python使用和导入模块/</id>
    <published>2017-03-20T13:47:06.000Z</published>
    <updated>2017-03-21T13:16:24.320Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-导入模块的方法"><a href="#1-导入模块的方法" class="headerlink" title="1. 导入模块的方法"></a>1. 导入模块的方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">import moduleName 导入模块</div><div class="line">From module import sayHi  从模块导入某个具体的方法</div><div class="line">import moduleName as newName  给模块起别名</div><div class="line">from sys import *   导入模块下的所有方法</div></pre></td></tr></table></figure>
<ul>
<li><p>给模块起别名</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">import multiprocessing as multi</div></pre></td></tr></table></figure>
</li>
<li><p>把模块下所有的方法导入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; from sys import *</div><div class="line">&gt;&gt;&gt; print path</div><div class="line">[&apos;&apos;, &apos;/usr/lib/python2.7&apos;, &apos;/usr/lib/python2.7/plat-x86_64-linux-gnu&apos;, &apos;/usr/lib/python2.7/lib-tk&apos;, &apos;/usr/lib/python2.7/lib-old&apos;, &apos;/usr/lib/python2.7/lib-dynload&apos;, &apos;/usr/local/lib/python2.7/dist-packages&apos;, &apos;/usr/lib/python2.7/dist-packages&apos;, &apos;/usr/lib/python2.7/dist-packages/PILcompat&apos;, &apos;/usr/lib/python2.7/dist-packages/gtk-2.0&apos;, &apos;/usr/lib/pymodules/python2.7&apos;, &apos;/usr/lib/python2.7/dist-packages/ubuntu-sso-client&apos;]</div></pre></td></tr></table></figure>
</li>
</ul>
<font color="red">不建议使用<code>from sys import *</code> 可能被自定义的变量覆盖 调用时加上模块名 <code>sys.argv[2]</code> 可防止 </font>


<h2 id="2-系统命令交互模块"><a href="#2-系统命令交互模块" class="headerlink" title="2. 系统命令交互模块"></a>2. 系统命令交互模块</h2><h3 id="2-1-os模块"><a href="#2-1-os模块" class="headerlink" title="2.1 os模块"></a>2.1 os模块</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; import os</div><div class="line">&gt;&gt;&gt; os.system(&apos;pwd&apos;)</div><div class="line">/home/niuzhiqiang/Desktop</div><div class="line">0</div><div class="line">&gt;&gt;&gt; cur_dir = os.system(&apos;pwd&apos;)</div><div class="line">/home/xxx/Desktop</div><div class="line">&gt;&gt;&gt; print cur_dir</div><div class="line">0</div><div class="line"></div><div class="line">&gt;&gt;&gt; os.popen(&apos;pwd&apos;)</div><div class="line">&lt;open file &apos;pwd&apos;, mode &apos;r&apos; at 0x7f9017578c90&gt;</div><div class="line">&gt;&gt;&gt; cur_dir = os.popen(&apos;pwd&apos;).read()</div><div class="line">&gt;&gt;&gt; print cur_dir</div><div class="line">/home/xxx/Desktop</div></pre></td></tr></table></figure>
<p><strong>例：循环列出目录下的内容</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; os.walk(&apos;/the/directory/&apos;)</div><div class="line">&gt;&gt;&gt; os.next()</div><div class="line">&gt;&gt;&gt; os.next()</div></pre></td></tr></table></figure>
<h3 id="2-2-commands模块"><a href="#2-2-commands模块" class="headerlink" title="2.2 commands模块"></a>2.2 commands模块</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; import commands</div><div class="line">&gt;&gt;&gt; res = commands.getstatusoutput(&apos;pwd&apos;)</div><div class="line">&gt;&gt;&gt; print res</div><div class="line">(0, &apos;/home/xxx/Desktop&apos;)</div><div class="line">&gt;&gt;&gt; print res[1]</div><div class="line">/home/xxx/Desktop</div></pre></td></tr></table></figure>
<h3 id="2-3-subprocess模块"><a href="#2-3-subprocess模块" class="headerlink" title="2.3 subprocess模块"></a>2.3 subprocess模块</h3><p>todo</p>
<h3 id="2-4-sys模块"><a href="#2-4-sys模块" class="headerlink" title="2.4 sys模块"></a>2.4 sys模块</h3><p>取程序的参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">import sys</div><div class="line">print sys.argv</div><div class="line">print sys.argv[2]</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">from sys import argv</div><div class="line"># 不需要使用`sys.`</div><div class="line">print argv</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-导入模块的方法&quot;&gt;&lt;a href=&quot;#1-导入模块的方法&quot; class=&quot;headerlink&quot; title=&quot;1. 导入模块的方法&quot;&gt;&lt;/a&gt;1. 导入模块的方法&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://niuzhiqiang90.coding.me/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python字符编码</title>
    <link href="http://niuzhiqiang90.coding.me/2017/03/20/python%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/"/>
    <id>http://niuzhiqiang90.coding.me/2017/03/20/python字符编码/</id>
    <published>2017-03-20T13:20:21.000Z</published>
    <updated>2017-03-21T13:16:24.320Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-ASSIC码"><a href="#1-ASSIC码" class="headerlink" title="1. ASSIC码"></a>1. ASSIC码</h2><p>一共规定了128个字符的编码</p>
<h3 id="1-1-ord函数"><a href="#1-1-ord函数" class="headerlink" title="1.1 ord函数"></a>1.1 ord函数</h3><p><code>ord(&#39;single-char&#39;)</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ord(...)</div><div class="line">    ord(c) -&gt; integer</div><div class="line">    </div><div class="line">    Return the integer ordinal of a one-character string.</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; ord(&apos;a&apos;)</div><div class="line">97</div><div class="line">&gt;&gt;&gt; type(ord(&apos;a&apos;))</div><div class="line">&lt;type &apos;int&apos;&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">string = &apos;Hello World&apos;</div><div class="line">for i in string:</div><div class="line">    print ord(i)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">string = &apos;Hello World&apos;</div><div class="line">list_ascii = [ord(i) for i in string]</div><div class="line">print list_ascii</div></pre></td></tr></table></figure>
<h3 id="1-2-chr函数"><a href="#1-2-chr函数" class="headerlink" title="1.2 chr函数"></a>1.2 chr函数</h3><p><code>chr(number)</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">chr(...)</div><div class="line">    chr(i) -&gt; character</div><div class="line">        </div><div class="line">            Return a string of one character with ordinal i; 0 &lt;= i &lt; 256.</div></pre></td></tr></table></figure>
<h2 id="2-Unicode编码"><a href="#2-Unicode编码" class="headerlink" title="2. Unicode编码"></a>2. Unicode编码</h2><p>16位 可以存下汉字</p>
<h3 id="2-1-默认编码是ASCII"><a href="#2-1-默认编码是ASCII" class="headerlink" title="2.1 默认编码是ASCII"></a>2.1 默认编码是ASCII</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; a = &apos;hello&apos;</div><div class="line">&gt;&gt;&gt; type(a)</div><div class="line">&lt;type &apos;str&apos;&gt;</div><div class="line">&gt;&gt;&gt; a</div><div class="line">&apos;hello&apos;</div></pre></td></tr></table></figure>
<h3 id="2-2-加u则指定为Unicode"><a href="#2-2-加u则指定为Unicode" class="headerlink" title="2.2 加u则指定为Unicode"></a>2.2 加<code>u</code>则指定为Unicode</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; a = u&apos;hello&apos;</div><div class="line">&gt;&gt;&gt; type(a)</div><div class="line">&lt;type &apos;unicode&apos;&gt;</div><div class="line">&gt;&gt;&gt; a</div><div class="line">u&apos;hello&apos;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; b=u&apos;你好&apos;</div><div class="line">&gt;&gt;&gt; b</div><div class="line">u&apos;\u4f60\u597d&apos;</div><div class="line">&gt;&gt;&gt; len(b)</div><div class="line">2</div></pre></td></tr></table></figure>
<h2 id="3-UTF-8编码"><a href="#3-UTF-8编码" class="headerlink" title="3. UTF-8编码"></a>3. UTF-8编码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 转换成utf-8</div><div class="line">&gt;&gt;&gt; b.encode(&apos;utf-8&apos;)</div><div class="line">&apos;\xe4\xbd\xa0\xe5\xa5\xbd&apos;</div><div class="line"></div><div class="line"></div><div class="line">&gt;&gt;&gt; b_utf8 = b.encode(&apos;utf-8&apos;)</div><div class="line">&gt;&gt;&gt; len(b_utf8)</div><div class="line">6</div></pre></td></tr></table></figure>
<h2 id="4-Unicode和UTF-8的转换"><a href="#4-Unicode和UTF-8的转换" class="headerlink" title="4. Unicode和UTF-8的转换"></a>4. Unicode和UTF-8的转换</h2><h3 id="4-1-Unicode-gt-gt-UTF-8"><a href="#4-1-Unicode-gt-gt-UTF-8" class="headerlink" title="4.1 Unicode &gt;&gt; UTF-8"></a>4.1 Unicode &gt;&gt; UTF-8</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">name.encode(&apos;utf-8&apos;)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; b=u&apos;你好&apos;</div><div class="line"># Unicode转换成UTF-8 </div><div class="line">&gt;&gt;&gt; b_utf8=b.encode(&apos;utf-8&apos;)</div></pre></td></tr></table></figure>
<h3 id="4-2-UTF-8-gt-gt-Unicode"><a href="#4-2-UTF-8-gt-gt-Unicode" class="headerlink" title="4.2 UTF-8  &gt;&gt; Unicode"></a>4.2 UTF-8  &gt;&gt; Unicode</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">name_utf8.decode(&apos;utf-8&apos;)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; b_utf8</div><div class="line">&apos;\xe4\xbd\xa0\xe5\xa5\xbd&apos;</div><div class="line">&gt;&gt;&gt; b_utf8.decode(&apos;utf-8&apos;)</div><div class="line">u&apos;\u4f60\u597d&apos;</div></pre></td></tr></table></figure>
<h2 id="5-指定程序的编码方式"><a href="#5-指定程序的编码方式" class="headerlink" title="5. 指定程序的编码方式"></a>5. 指定程序的编码方式</h2><p>程序如果有中文,需要指定编码方式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#_*_ coding:utf-8 _*_</div><div class="line"></div><div class="line">name = u&apos;中文&apos;</div><div class="line">print name</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-ASSIC码&quot;&gt;&lt;a href=&quot;#1-ASSIC码&quot; class=&quot;headerlink&quot; title=&quot;1. ASSIC码&quot;&gt;&lt;/a&gt;1. ASSIC码&lt;/h2&gt;&lt;p&gt;一共规定了128个字符的编码&lt;/p&gt;
&lt;h3 id=&quot;1-1-ord函数&quot;&gt;&lt;a hre
    
    </summary>
    
    
      <category term="python" scheme="http://niuzhiqiang90.coding.me/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>ceph</title>
    <link href="http://niuzhiqiang90.coding.me/2017/03/13/ceph/"/>
    <id>http://niuzhiqiang90.coding.me/2017/03/13/ceph/</id>
    <published>2017-03-13T13:13:03.000Z</published>
    <updated>2017-06-04T13:38:04.416Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ceph的搭建"><a href="#ceph的搭建" class="headerlink" title="ceph的搭建"></a>ceph的搭建</h1><p><strong>注</strong> 如果在安装过程中，想要重新安装，需要执行如下命令清除<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">sudo stop ceph-all  #停止所有CEPH进程</div><div class="line">ceph-deploy uninstall  [&#123;ceph-node&#125;]   #卸载所有ceph程序</div><div class="line">ceph-deploy purge   [[ceph-node&#125; [&#123;ceph-node&#125;] #删除ceph相关的包</div><div class="line">ceph-deploy purgedata &#123;ceph-node&#125; [&#123;ceph-node&#125;]   #删除ceph相关的包</div><div class="line">ceph-deploy forgetkeys #删除key</div></pre></td></tr></table></figure></p>
<h2 id="1-安装前准备"><a href="#1-安装前准备" class="headerlink" title="1. 安装前准备"></a>1. 安装前准备</h2><h3 id="1-1-添加hosts解析"><a href="#1-1-添加hosts解析" class="headerlink" title="1.1 添加hosts解析"></a>1.1 添加hosts解析</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">sudo vi /etc/hosts</div><div class="line"></div><div class="line"># 添加如下内容</div><div class="line">192.168.1.174	node1</div><div class="line">192.168.1.175	node2</div></pre></td></tr></table></figure>
<p><strong>注:  <font color="red">node1 node2必须为hostname，因为在安装过程中会验证hostname是否为node{1,2}<br>遇到这个错误，需要完全清理ceph软件和配置数据，从头再来<br></font></strong></p>
<h3 id="1-2-免密码登录"><a href="#1-2-免密码登录" class="headerlink" title="1.2 免密码登录"></a>1.2 免密码登录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 生成密钥对</div><div class="line">ssh-keygen -t rsa</div><div class="line"></div><div class="line"># admin节点需要通过密钥对登录到其他节点</div><div class="line">ssh-copy-id ceph@node1</div><div class="line">ssh-copy-id ceph@node2</div></pre></td></tr></table></figure>
<p>在<strong>每个Ceph节点</strong>中为用户增加 root 权限<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">echo &quot;ceph ALL = (root) NOPASSWD:ALL&quot; | sudo tee /etc/sudoers.d/ceph</div><div class="line">sudo chmod 0440 /etc/sudoers.d/ceph</div></pre></td></tr></table></figure></p>
<h3 id="1-3-安装ceph-deploy软件"><a href="#1-3-安装ceph-deploy软件" class="headerlink" title="1.3 安装ceph-deploy软件"></a>1.3 安装ceph-deploy软件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">wget -q -O- &apos;https://download.ceph.com/keys/release.asc&apos; | sudo apt-key add -</div><div class="line"></div><div class="line"># 添加Ceph软件包源，用Ceph稳定版（如cuttlefish 、 dumpling 、 emperor 、 firefly 等等）替换掉 &#123;ceph-stable-release&#125;</div><div class="line"># echo deb http://download.ceph.com/debian-&#123;ceph-stable-release&#125;/ $(lsb_release -sc) main | sudo tee /etc/apt/sources.list.d/ceph.list</div><div class="line"># 例如：</div><div class="line">echo deb http://download.ceph.com/debian-dumpling/ $(lsb_release -sc) main | sudo tee /etc/apt/sources.list.d/ceph.list</div><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install ceph-deploy</div></pre></td></tr></table></figure>
<h2 id="2-创建ceph目录"><a href="#2-创建ceph目录" class="headerlink" title="2. 创建ceph目录"></a>2. 创建ceph目录</h2><p>我们使用ceph-deploy部署，<strong>后续操作均在admin节点操作</strong>。<br>首先需要创建工作环境，该环境会保存所有的配置文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mkdir opt/ceph</div><div class="line">cd opt/ceph</div></pre></td></tr></table></figure></p>
<h2 id="3-创建集群"><a href="#3-创建集群" class="headerlink" title="3. 创建集群"></a>3. 创建集群</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ceph@node1:~/opt/ceph$ ceph-deploy new node1</div></pre></td></tr></table></figure>
<p>其中node1是mon节点，执行该命令会生成ceph配置文件、monitor密钥文件以及日志文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ceph@node1:~/opt/ceph$ ls</div><div class="line">ceph.conf  ceph.log  ceph.mon.keyring</div></pre></td></tr></table></figure></p>
<h2 id="4-修改默认冗余份数"><a href="#4-修改默认冗余份数" class="headerlink" title="4. 修改默认冗余份数"></a>4. 修改默认冗余份数</h2><h3 id="4-1-设置osd冗余份数"><a href="#4-1-设置osd冗余份数" class="headerlink" title="4.1 设置osd冗余份数"></a>4.1 设置osd冗余份数</h3><p>由于我们目前只有两个osd节点，而默认的冗余份数是3，因此我们需要设置为2，如果osd节点大于2，则此步骤省略。<br>修改ceph.conf文件，在[global]下增加以下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ceph@node1:~/opt/ceph$ echo &quot;osd pool default size = 2&quot; &gt;&gt; ceph.conf</div></pre></td></tr></table></figure></p>
<p><strong>如果有多块网卡需要配置使用哪块网卡</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mon_host = `对应网卡的IP地址`</div></pre></td></tr></table></figure></p>
<h3 id="4-2-在节点上安装ceph软件"><a href="#4-2-在节点上安装ceph软件" class="headerlink" title="4.2 在节点上安装ceph软件"></a>4.2 在节点上安装ceph软件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ceph@node1:~/opt/ceph$ ceph-deploy install node1 node2</div></pre></td></tr></table></figure>
<p>如果失败会报如下错误<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[node1][ERROR ] RuntimeError: command returned non-zero exit status: 100</div><div class="line">[ceph_deploy][ERROR ] RuntimeError: Failed to execute command: apt-get -q update</div></pre></td></tr></table></figure></p>
<p><strong>解决方法</strong></p>
<ul>
<li><p>1.同步配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ceph@node1:~/opt/ceph$ rsync -avz ../ceph ceph@node2:~/opt/</div></pre></td></tr></table></figure>
</li>
<li><p>2.在<font color="red">所有节点</font>分别安装ceph</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ceph@node1:~/opt/ceph$ sudo apt-get install ceph</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="5-初始化mon节点和收集密钥信息"><a href="#5-初始化mon节点和收集密钥信息" class="headerlink" title="5. 初始化mon节点和收集密钥信息"></a>5. 初始化mon节点和收集密钥信息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ceph@node1:~/opt/ceph$ ceph-deploy mon create-initial</div></pre></td></tr></table></figure>
<p>如果报如下错误<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[node1][DEBUG ] get remote short hostname</div><div class="line">[node1][WARNIN] ********************************************************************************</div><div class="line">[node1][WARNIN] provided hostname must match remote hostname</div><div class="line">[node1][WARNIN] provided hostname: node1</div><div class="line">[node1][WARNIN] remote hostname: ubuntu</div><div class="line">[node1][WARNIN] monitors may not reach quorum and create-keys will not complete</div></pre></td></tr></table></figure></p>
<p>因为/etc/hosts中解析的<code>ip地址 主机名</code>和远端的主机名不匹配所致，在/etc/hosts中修改为正确的hostname，清理下从头重新安装。</p>
<p>执行完毕，目录应该有以下文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;cluster-name&#125;.client.admin.keyring</div><div class="line">&#123;cluster-name&#125;.bootstrap-osd.keyring</div><div class="line">&#123;cluster-name&#125;.bootstrap-mds.keyring</div><div class="line">&#123;cluster-name&#125;.bootstrap-rgw.keyring</div></pre></td></tr></table></figure></p>
<h2 id="6-配置osd节点"><a href="#6-配置osd节点" class="headerlink" title="6. 配置osd节点"></a>6. 配置osd节点</h2><p>首先格式化磁盘，注意我们使用的是/dev/sdb：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ceph@node1:~/opt/ceph$ ceph-deploy disk zap node1:sdb</div><div class="line">ceph@node1:~/opt/ceph$ ceph-deploy disk zap node2:sdb</div></pre></td></tr></table></figure></p>
<p>以上步骤会<font color="red">清空磁盘的所有数据</font>。</p>
<p>接下来创建osd，注意由于我们只是测试，故没有使用单独的磁盘作为journal<br>(todo分析具体什么)<br>实际在生产环境下，需要配备SSD分区作为journal，能够最大化IO吞吐量。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ceph@node1:~/opt/ceph$ ceph-deploy osd create node1:sdb</div><div class="line">ceph@node1:~/opt/ceph$ ceph-deploy osd create node2:sdb</div></pre></td></tr></table></figure></p>
<p>在节点上执行<code>df -h</code>会得到如下结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/dev/sdb1        35G   36M   35G   1% /var/lib/ceph/osd/ceph-0</div></pre></td></tr></table></figure></p>
<h2 id="7-配置admin节点"><a href="#7-配置admin节点" class="headerlink" title="7. 配置admin节点"></a>7. 配置admin节点</h2><p>admin节点同时也作为我们的client节点，需要拷贝其他节点的配置文件以及密钥，使得不需要指定mon地址以及用户信息就可以直接管理我们的ceph集群，执行以下命令即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ceph@node1:~/opt/ceph$ ceph-deploy admin node1 node2</div><div class="line">ceph@node1:~/opt/ceph$ sudo chmod +r /etc/ceph/ceph.client.admin.keyring # 保证具有读取的密钥的权限</div></pre></td></tr></table></figure></p>
<h2 id="8-测试结果"><a href="#8-测试结果" class="headerlink" title="8. 测试结果"></a>8. 测试结果</h2><p>运行以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ceph@node1:~/opt/ceph$ ceph health</div><div class="line">ceph@node1:~/opt/ceph$ ceph -s</div></pre></td></tr></table></figure></p>
<p>结果若返回active + clean状态，则说明部署成功！</p>
<h2 id="9-配置mds"><a href="#9-配置mds" class="headerlink" title="9. 配置mds"></a>9. 配置mds</h2><p><a href="http://docs.ceph.com/docs/master/install/manual-deployment/#adding-mds" target="_blank" rel="external">Adding MDS参考链接</a></p>
<h3 id="9-1-安装mds"><a href="#9-1-安装mds" class="headerlink" title="9.1 安装mds"></a>9.1 安装mds</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ceph@node1:~/opt/ceph$ sudo apt-get install ceph-mds</div></pre></td></tr></table></figure>
<h3 id="9-2-配置"><a href="#9-2-配置" class="headerlink" title="9.2 配置"></a>9.2 配置</h3><p>{id}是一个任意的名字,例如可以是电脑的主机名</p>
<p>编辑<code>ceph.conf</code>，添加MDS区域<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[mds]</div><div class="line">  mds data = /var/lib/ceph/mds/mds.$id</div><div class="line">  keyring = /var/lib/ceph/mds/mds.$id/mds.$id.keyring</div><div class="line"></div><div class="line">[mds.0] # 0为id</div><div class="line">  host = 0 # &#123;id&#125;</div></pre></td></tr></table></figure></p>
<h3 id="9-3-创建目录"><a href="#9-3-创建目录" class="headerlink" title="9.3 创建目录"></a>9.3 创建目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ceph@node1:~/opt/ceph$ mkdir -p /var/lib/ceph/mds/&#123;cluster-name&#125;-&#123;id&#125;</div></pre></td></tr></table></figure>
<h3 id="9-4-生成keyring"><a href="#9-4-生成keyring" class="headerlink" title="9.4 生成keyring"></a>9.4 生成keyring</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ceph@node1:~/opt/ceph$ ceph-authtool --create-keyring /var/lib/ceph/mds/&#123;cluster-name&#125;-&#123;id&#125;/keyring --gen-key -n mds.&#123;id&#125;</div></pre></td></tr></table></figure>
<p>Import the keyring and set caps.:</p>
<h3 id="9-5-导入keyring"><a href="#9-5-导入keyring" class="headerlink" title="9.5 导入keyring"></a>9.5 导入keyring</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ceph@node1:~/opt/ceph$ ceph auth add mds.&#123;id&#125; osd &quot;allow rwx&quot; mds &quot;allow&quot; mon &quot;allow profile mds&quot; -i /var/lib/ceph/mds/&#123;cluster&#125;-&#123;id&#125;/keyring</div></pre></td></tr></table></figure>
<h3 id="9-6-修改配置文件"><a href="#9-6-修改配置文件" class="headerlink" title="9.6 修改配置文件"></a>9.6 修改配置文件</h3><p>Add to ceph.conf.:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[mds.&#123;id&#125;]</div><div class="line">host = &#123;id&#125;</div></pre></td></tr></table></figure></p>
<h3 id="9-7-手动启动"><a href="#9-7-手动启动" class="headerlink" title="9.7 手动启动"></a>9.7 手动启动</h3><p>Start the daemon the manual way.:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ceph@node1:~/opt/ceph$ ceph-mds --cluster &#123;cluster-name&#125; -i &#123;id&#125; -m &#123;mon-hostname&#125;:&#123;mon-port&#125; [-f]</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ceph@node1:~/opt/ceph$ service ceph start</div><div class="line">ceph@node1:~/opt/ceph$ sudo service ceph start mds</div></pre></td></tr></table></figure>
<p>检查进程是否存在<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ceph@node1:~/opt/ceph$ ps -ef | grep ceph</div><div class="line">root      4032     1  0 17:18 ?        00:00:00 /usr/bin/ceph-mon --cluster=ceph -i node1 -f</div><div class="line">root      4687     1  0 17:19 ?        00:00:04 /usr/bin/ceph-osd --cluster=ceph -i 0 -f</div><div class="line">root      5196     1  0 17:23 ?        00:00:00 ceph-mds --cluster mds -i 0 -m 192.168.1.176:6789</div></pre></td></tr></table></figure></p>
<p>如果已经存在，下面步骤跳过，直接执行第10步的挂载</p>
<p>如果mds起不来，可以执行如下命令，查看具体报错信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ceph@node1:~/opt/ceph$ sudo ceph-mds --cluster node1 -i 0 -m 192.168.1.176:6789 -f</div><div class="line">starting mds.0 at :/0</div><div class="line">2017-03-13 15:15:49.485908 7f32b07bb800 -1 did not load config file, using default settings.</div><div class="line">2017-03-13 15:15:49.488414 7f32b07bb800 -1 monclient(hunting): ERROR: missing keyring, cannot use cephx for authentication</div><div class="line">2017-03-13 15:15:49.490934 7f32b07bb800 -1 mds.-1.0 ERROR: failed to authenticate: (95) Operation not supported</div></pre></td></tr></table></figure></p>
<blockquote>
<p>If starting the daemon fails with this error:<br>mds.-1.0 ERROR: failed to authenticate: (22) Invalid argument<br>Then make sure you do not have a keyring set in ceph.conf in the global section; move it to the client section; or add a keyring setting specific to this mds daemon. And verify that you see the same key in the mds data directory and ceph auth get mds.{id} output.</p>
</blockquote>
<p><strong> 检查步骤 </strong><br>查看如下结果是否一致<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">ceph@node1:~/opt/ceph$ ceph auth get mds.0</div><div class="line">exported keyring for mds.0</div><div class="line">[mds.0]</div><div class="line">        key = AQBrR8ZY8GN+NxAAVu2pKRH0pXKixwca7HUdjA==</div><div class="line">        caps mds = &quot;allow&quot;</div><div class="line">        caps mon = &quot;allow profile mds&quot;</div><div class="line">        caps osd = &quot;allow rwx&quot;</div><div class="line"></div><div class="line"></div><div class="line">ceph@node1:~/opt/ceph$ cat /var/lib/ceph/mds/mds-0/keyring</div><div class="line">[mds.0]</div><div class="line">        key = AQBrR8ZY8GN+NxAAVu2pKRH0pXKixwca7HUdjA==</div></pre></td></tr></table></figure></p>
<p>如果仍然报如上错误，可以尝试<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ceph@node1:~/opt/ceph$ sudo chown -R ceph:ceph /var/lib/ceph/mds/mds-0</div></pre></td></tr></table></figure></p>
<p>重新生成认证文件应该就会成功,<font color="red">不过不确定对后续操作的影响</font></p>
<p><a href="https://www.sebastien-han.fr/blog/2013/05/13/deploy-a-ceph-mds-server/" target="_blank" rel="external">也可以尝试这里的步骤，不过不保证会好使</a></p>
<p>Now you are ready to create a Ceph filesystem.</p>
<h2 id="10-挂载"><a href="#10-挂载" class="headerlink" title="10. 挂载"></a>10. 挂载</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ceph@node1:~/opt/ceph$ sudo mkdir /mnt/cephfs</div><div class="line">ceph@node1:~/opt/ceph$ sudo ceph-fuse -m &#123;ip-address-of-monitor&#125;:6789 /mnt/cephfs</div><div class="line">ceph@node1:~/opt/ceph$ df -h</div></pre></td></tr></table></figure>
<p>在node2上执行 安装ceph-fuse<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ceph@node1:~/opt/ceph$ sudo apt-get install ceph-fuse</div><div class="line">ceph@node1:~/opt/ceph$ sudo mkdir /mnt/cephfs</div><div class="line">ceph@node1:~/opt/ceph$ sudo ceph-fuse -m &#123;ip-address-of-monitor&#125;:6789 /mnt/cephfs</div><div class="line">ceph@node1:~/opt/ceph$ df -h</div></pre></td></tr></table></figure></p>
<h2 id="11-注意事项"><a href="#11-注意事项" class="headerlink" title="11. 注意事项"></a>11. 注意事项</h2><font color="red">用户ceph不能够锁定，为了安全问题，只能将用户ceph改为nologin</font>

<h2 id="12-服务器重启"><a href="#12-服务器重启" class="headerlink" title="12. 服务器重启"></a>12. 服务器重启</h2><p>服务器重启后，对于mon节点来说<code>osd</code>和<code>mon</code>会自动启动<br>osd节点的osd服务也会自动启动</p>
<p> mon节点的<code>mds</code>服务需要手动启动，启动方法为<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo ceph-mds --cluster &#123;cluster-name&#125; -i &#123;id&#125; -m &#123;mon-hostname&#125;:&#123;mon-port&#125; [-f]</div></pre></td></tr></table></figure></p>
<p> <strong>另</strong><br> 启动完mds后还需要执行挂载命令<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo ceph-fuse -m &#123;ip-address-of-monitor&#125;:6789 /mnt/cephfs</div></pre></td></tr></table></figure></p>
<p> 可以将以上命令<strong>放入到开机启动项中</strong>，但是服务器重启完成后要进行检查ceph的运行状态<br> <code>ceph -s</code>或者<code>ps -ef | grep ceph</code> 或者 通过<code>df -h</code>查看ceph-fuse是否成功挂载目录<br> 如果长时间没成功，并且<code>ceph -s</code>报错，可以尝试将另一节点node2也重启，node1可以成功挂载。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ceph的搭建&quot;&gt;&lt;a href=&quot;#ceph的搭建&quot; class=&quot;headerlink&quot; title=&quot;ceph的搭建&quot;&gt;&lt;/a&gt;ceph的搭建&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;注&lt;/strong&gt; 如果在安装过程中，想要重新安装，需要执行如下命令清除&lt;br&gt;&lt;
    
    </summary>
    
      <category term="ceph" scheme="http://niuzhiqiang90.coding.me/categories/ceph/"/>
    
    
      <category term="ceph" scheme="http://niuzhiqiang90.coding.me/tags/ceph/"/>
    
  </entry>
  
  <entry>
    <title>docker-registry</title>
    <link href="http://niuzhiqiang90.coding.me/2017/02/27/docker-registry/"/>
    <id>http://niuzhiqiang90.coding.me/2017/02/27/docker-registry/</id>
    <published>2017-02-27T11:44:00.000Z</published>
    <updated>2017-08-29T15:13:37.367Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-启动registry"><a href="#1-启动registry" class="headerlink" title="1. 启动registry"></a>1. 启动registry</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -d -p 5000:5000 --name registry registry</div></pre></td></tr></table></figure>
<p><strong>说明</strong></p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>-p 5000:5000</code></td>
<td>第一个是host的端口，第二个是container的端口</td>
</tr>
<tr>
<td><code>--name registry registry1</code></td>
<td>registry是镜像名字，registry1是自定义的私有registry名字</td>
</tr>
</tbody>
</table>
<h2 id="2-测试私有仓库"><a href="#2-测试私有仓库" class="headerlink" title="2. 测试私有仓库"></a>2. 测试私有仓库</h2><h3 id="2-1-新pull一个镜像"><a href="#2-1-新pull一个镜像" class="headerlink" title="2.1 新pull一个镜像"></a>2.1 新pull一个镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo docker pull busybox</div></pre></td></tr></table></figure>
<h3 id="2-2-给镜像打个tag"><a href="#2-2-给镜像打个tag" class="headerlink" title="2.2 给镜像打个tag"></a>2.2 给镜像打个tag</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo docker tag busybox xxx.xxx.xxx.xxx:5000/myfirstimage</div></pre></td></tr></table></figure>
<h3 id="2-3-push到私有仓库"><a href="#2-3-push到私有仓库" class="headerlink" title="2.3 push到私有仓库"></a>2.3 push到私有仓库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo docker push xxx.xxx.xxx.xxx:5000/myfirstimage</div></pre></td></tr></table></figure>
<h3 id="2-4-查看私有镜像仓库中的镜像"><a href="#2-4-查看私有镜像仓库中的镜像" class="headerlink" title="2.4 查看私有镜像仓库中的镜像"></a>2.4 查看私有镜像仓库中的镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl http://xxx.xxx.xxx.xxx:5000/v2/_catalog</div></pre></td></tr></table></figure>
<h3 id="2-5-删除本地的镜像"><a href="#2-5-删除本地的镜像" class="headerlink" title="2.5 删除本地的镜像"></a>2.5 删除本地的镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo docker rmi xxx.xxx.xxx.xxx:5000/myfirstimage</div></pre></td></tr></table></figure>
<h3 id="2-6-将刚才的删除的镜像，从私有镜像仓库pull回来"><a href="#2-6-将刚才的删除的镜像，从私有镜像仓库pull回来" class="headerlink" title="2.6 将刚才的删除的镜像，从私有镜像仓库pull回来"></a>2.6 将刚才的删除的镜像，从私有镜像仓库pull回来</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo docker pull xxx.xxx.xxx.xxx:5000/myfirstimage</div></pre></td></tr></table></figure>
<h2 id="3-报错及处理"><a href="#3-报错及处理" class="headerlink" title="3. 报错及处理"></a>3. 报错及处理</h2><h3 id="3-1-在本地push时，出现如下错误"><a href="#3-1-在本地push时，出现如下错误" class="headerlink" title="3.1 在本地push时，出现如下错误"></a>3.1 在本地push时，出现如下错误</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo docker push xxx.xxx.xxx.xxx:5000/myfirstimage</div><div class="line">The push refers to a repository [xxx.xxx.xxx.xxx:5000/myfirstimage]</div><div class="line">Get https://xxx.xxx.xxx.xxx:5000/v1/_ping: http: server gave HTTP response to HTTPS client</div></pre></td></tr></table></figure>
<p><strong>解决方案</strong></p>
<ol>
<li><p>修改配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo vi /etc/default/docker</div></pre></td></tr></table></figure>
</li>
<li><p>添加如下内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DOCKER_OPTS=&quot;--insecure-registry xxx.xxx.xxx.xxx:5000&quot;</div></pre></td></tr></table></figure>
</li>
<li><p>重启docker服务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo service docker restart</div></pre></td></tr></table></figure>
</li>
<li><p>重新执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo docker push xxx.xxx.xxx.xxx:5000/myfirstimage</div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-启动registry&quot;&gt;&lt;a href=&quot;#1-启动registry&quot; class=&quot;headerlink&quot; title=&quot;1. 启动registry&quot;&gt;&lt;/a&gt;1. 启动registry&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;
    
    </summary>
    
    
      <category term="docker" scheme="http://niuzhiqiang90.coding.me/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>docker容器</title>
    <link href="http://niuzhiqiang90.coding.me/2017/02/27/docker%E5%AE%B9%E5%99%A8/"/>
    <id>http://niuzhiqiang90.coding.me/2017/02/27/docker容器/</id>
    <published>2017-02-27T09:26:49.000Z</published>
    <updated>2017-03-13T13:34:57.009Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-新建并启动容器"><a href="#1-新建并启动容器" class="headerlink" title="1. 新建并启动容器"></a>1. 新建并启动容器</h2><p><code>docker run</code><br>例：下面的命令输出一个“Hello World”并终止容器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo docker run ubuntu:14.04 /bin/echo &apos;Hello World&apos;</div><div class="line">Hello World</div></pre></td></tr></table></figure></p>
<p>启动一个bash终端并允许交互<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo docker run -t -i ubuntu:14.04 /bin/bash</div><div class="line">root@3060c837bd2d:/#</div></pre></td></tr></table></figure></p>
<p><code>-t</code>让docker分配一个伪终端并绑定到容器的标准输入上，<code>-i</code>则让容器的标准输入保持打开。</p>
<h2 id="2-启动已终止的容器"><a href="#2-启动已终止的容器" class="headerlink" title="2. 启动已终止的容器"></a>2. 启动已终止的容器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo docker ps -a 找到容器ID</div><div class="line">sudo docker start CONTAINER_ID</div></pre></td></tr></table></figure>
<h2 id="3-守护态运行"><a href="#3-守护态运行" class="headerlink" title="3. 守护态运行"></a>3. 守护态运行</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$sudo docker run -d ubuntu:14.04 /bin/sh -c &quot;while true; do echo hello world; sleep 1; done&quot;</div></pre></td></tr></table></figure>
<p>在使用<code>-d</code>参数时,容器启动后会进入后台。某些时候需要进入容器进行操作,有很多种方法,包括使用<code>docker attach</code>命令或nsenter工具等。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">ubuntu@ubuntu:~$ sudo docker ps</div><div class="line">CONTAINER ID        IMAGE               COMMAND                CREATED             STATUS              PORTS               NAMES</div><div class="line">428e85fb5182        ubuntu:12.04        &quot;/bin/sh -c &apos;while t   3 minutes ago       Up 3 minutes                            pensive_kirch       </div><div class="line">ubuntu@ubuntu:~$ sudo docker attach 428e85fb5182</div><div class="line">hello world</div><div class="line">hello world</div><div class="line">hello world</div><div class="line">^Cubuntu@ubuntu:~$ </div><div class="line">ubuntu@ubuntu:~$ sudo docker ps</div><div class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</div></pre></td></tr></table></figure></p>
<p>获取容器的输出信息，可以通过<code>docker log</code>命令。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo docker logs CONTAINER_ID</div></pre></td></tr></table></figure></p>
<h2 id="4-终止容器"><a href="#4-终止容器" class="headerlink" title="4. 终止容器"></a>4. 终止容器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo docker stop CONTAINER_ID</div></pre></td></tr></table></figure>
<p>处于终止态的容器可以通过<code>sudo docker start CONTAINER_ID</code>命令来重新启动。<br><code>sudo docker restart CONTAINER_ID</code>命令可以重启一个运行态的容器。</p>
<h2 id="5-进入容器"><a href="#5-进入容器" class="headerlink" title="5. 进入容器"></a>5. 进入容器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo docker attach CONTAINER_ID</div></pre></td></tr></table></figure>
<p>用attach命令有时候并不方便。当多个窗口同时attach到同一个容器的时候,所有窗口都会同步显示。当某个窗口因命令阻塞时,其他窗口也无法执行操作了。</p>
<h2 id="6-导出容器"><a href="#6-导出容器" class="headerlink" title="6. 导出容器"></a>6. 导出容器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">sudo docker ps -a</div><div class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS           PORTS             NAMES</div><div class="line">3060c837bd2d        ubuntu:14.04        &quot;/bin/bash&quot;              3 days ago          Up 6 hours                         nonghe</div><div class="line"></div><div class="line">sudo docker export 3060c837bd2d &gt; ubuntu.tar</div></pre></td></tr></table></figure>
<p>这样导出容器快照到本地文件。</p>
<h2 id="7-导入容器快照"><a href="#7-导入容器快照" class="headerlink" title="7. 导入容器快照"></a>7. 导入容器快照</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cat ubuntu.tar | sudo docker import - test/ubuntu:v1.0</div><div class="line">sudo docker images</div></pre></td></tr></table></figure>
<p>通过指定URL或者某个目录来导入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo docker import http://example.com/exampleimage.tgz example/imagerepo</div></pre></td></tr></table></figure></p>
<p>既可以使用<code>docker load</code>来导入镜像存储文件到本地镜像库，也可以使用<code>docker import</code>来导入一个容器快照到本地镜像库。这两者的区别在于容器快照文件将丢弃所有的历史记录和元数据信息（即仅保持容器当时的快照状态），而镜像存储文件将保存完整记录，体积也要大。此外，从容器快照文件导入时可以重新指定标签等元数据信息。</p>
<h2 id="8-删除容器"><a href="#8-删除容器" class="headerlink" title="8. 删除容器"></a>8. 删除容器</h2><p>处于终止状态的容器可以通过如下命令来删除<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo docker rm CONTAINER_ID</div></pre></td></tr></table></figure></p>
<p>如果要删除一个运行中的容器，可以添加<code>-f</code>参数。docker会发送SIGKILL信号给容器。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-新建并启动容器&quot;&gt;&lt;a href=&quot;#1-新建并启动容器&quot; class=&quot;headerlink&quot; title=&quot;1. 新建并启动容器&quot;&gt;&lt;/a&gt;1. 新建并启动容器&lt;/h2&gt;&lt;p&gt;&lt;code&gt;docker run&lt;/code&gt;&lt;br&gt;例：下面的命令输出一个“H
    
    </summary>
    
    
      <category term="docker" scheme="http://niuzhiqiang90.coding.me/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>docker镜像</title>
    <link href="http://niuzhiqiang90.coding.me/2017/02/27/docker%E9%95%9C%E5%83%8F/"/>
    <id>http://niuzhiqiang90.coding.me/2017/02/27/docker镜像/</id>
    <published>2017-02-27T09:15:33.000Z</published>
    <updated>2017-03-13T13:34:57.009Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-获取镜像"><a href="#1-获取镜像" class="headerlink" title="1. 获取镜像"></a>1. 获取镜像</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo docker pull 镜像名</div></pre></td></tr></table></figure>
<p>例：从Docker Hub仓库下载一个Ubuntu 12.04的操作系统的镜像<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">ubuntu@ubuntu:~$ sudo docker pull ubuntu:12.04</div><div class="line">12.04: Pulling from ubuntu</div><div class="line"></div><div class="line">8941035ae797: Pull complete </div><div class="line">191c4e1e4400: Pull complete </div><div class="line">fd04a9dc157f: Pull complete </div><div class="line">be08d59fa177: Pull complete </div><div class="line">ecf8c2069900: Pull complete </div><div class="line">8ea067ad7a27: Pull complete </div><div class="line">Digest: sha256:57a83f4b4f43f2d008c8ceaa9663a6f7ecd061fefa80da8f32e0f22c7b923390</div><div class="line">Status: Downloaded newer image for ubuntu:12.04</div></pre></td></tr></table></figure></p>
<h2 id="2-显示本地镜像"><a href="#2-显示本地镜像" class="headerlink" title="2. 显示本地镜像"></a>2. 显示本地镜像</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo docker images</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ubuntu@ubuntu:~$ sudo docker images</div><div class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</div><div class="line">ubuntu              12.04               8ea067ad7a27        4 weeks ago         103.6 MB</div></pre></td></tr></table></figure>
<h2 id="3-创建镜像"><a href="#3-创建镜像" class="headerlink" title="3. 创建镜像"></a>3. 创建镜像</h2><h3 id="3-1-修改已有的镜像"><a href="#3-1-修改已有的镜像" class="headerlink" title="3.1 修改已有的镜像"></a>3.1 修改已有的镜像</h3><ul>
<li>使用下载的镜像启动一个容器<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo docker run -t -i 镜像名 /bin/bash</div></pre></td></tr></table></figure>
</li>
</ul>
<p>例： 使用镜像ubuntu:12.04来启动一个容器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">ubuntu@ubuntu:~$ sudo docker run -t -i ubuntu:12.04 /bin/bash</div><div class="line">root@c2b59b70c1b7:/# pwd</div><div class="line">/</div><div class="line">root@f93c7537832d:/# ls</div><div class="line">bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  selinux  srv  sys  tmp  usr  var</div><div class="line">root@f93c7537832d:/# ps </div><div class="line">  PID TTY          TIME CMD</div><div class="line">    1 ?        00:00:00 bash</div><div class="line">   12 ?        00:00:00 ps</div></pre></td></tr></table></figure></p>
<ul>
<li><p>在容器中对安装软件<br>结束操作后，执行<code>exit</code>来退出。</p>
</li>
<li><p>提交更新后的副本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo docker commit -m &quot;提交说明&quot; -a 指定更新的用户信息 用来创建镜像的容器的ID 指定目标镜像的仓库名和tag信息</div></pre></td></tr></table></figure>
</li>
</ul>
<p>创建成功后会返回这个镜像的ID信息<br>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo docker commit -m &quot;Add node&quot; -a &quot;username&quot; aeee120a81fc testnode </div><div class="line"></div><div class="line">sudo docker images 查看新创建的镜像</div><div class="line">sudo docker run -t -i testnode /bin/bash  使用新创建的镜像启动容器</div></pre></td></tr></table></figure></p>
<h3 id="3-2-使用Dockerfile来创建镜像"><a href="#3-2-使用Dockerfile来创建镜像" class="headerlink" title="3.2 使用Dockerfile来创建镜像"></a>3.2 使用Dockerfile来创建镜像</h3><p>todo</p>
<h3 id="3-3-从本地导入"><a href="#3-3-从本地导入" class="headerlink" title="3.3 从本地导入"></a>3.3 从本地导入</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo cat ubuntu-14.04.tar.gz | docker import - ubuntu:14.04</div><div class="line">sudo docker images</div></pre></td></tr></table></figure>
<h3 id="3-4-上传镜像"><a href="#3-4-上传镜像" class="headerlink" title="3.4 上传镜像"></a>3.4 上传镜像</h3><p>用户在Docker Hub上完成注册后，可以可以通过<code>docker push</code>命令，把自己创建的镜像上传到docker的公共仓库来共享。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo docker push 镜像名</div></pre></td></tr></table></figure></p>
<h2 id="4-存出镜像"><a href="#4-存出镜像" class="headerlink" title="4. 存出镜像"></a>4. 存出镜像</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo docker images</div><div class="line">sudo docker save -o 保存文件名 镜像名</div></pre></td></tr></table></figure>
<h2 id="5-载入镜像"><a href="#5-载入镜像" class="headerlink" title="5. 载入镜像"></a>5. 载入镜像</h2><p>可以使用<code>docker load</code>从导出的本地文件中再导入到本地镜像库。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo docker load --input ubuntu_14.04.tar</div></pre></td></tr></table></figure></p>
<p>或<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo docker load &lt; ubuntu_14.04.tar</div></pre></td></tr></table></figure></p>
<p>这将导入镜像以及相关的元数据信息（包括标签等）</p>
<h2 id="6-删除本地镜像"><a href="#6-删除本地镜像" class="headerlink" title="6. 删除本地镜像"></a>6. 删除本地镜像</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo docker rmi IMAGE_ID</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-获取镜像&quot;&gt;&lt;a href=&quot;#1-获取镜像&quot; class=&quot;headerlink&quot; title=&quot;1. 获取镜像&quot;&gt;&lt;/a&gt;1. 获取镜像&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;g
    
    </summary>
    
    
      <category term="docker" scheme="http://niuzhiqiang90.coding.me/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>docker安装</title>
    <link href="http://niuzhiqiang90.coding.me/2017/02/27/docker%E5%AE%89%E8%A3%85/"/>
    <id>http://niuzhiqiang90.coding.me/2017/02/27/docker安装/</id>
    <published>2017-02-27T09:03:14.000Z</published>
    <updated>2017-06-04T13:38:04.416Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-ubuntu通过Docker源安装最新版本"><a href="#1-ubuntu通过Docker源安装最新版本" class="headerlink" title="1. ubuntu通过Docker源安装最新版本"></a>1. ubuntu通过Docker源安装最新版本</h2><h3 id="1-1-安装依赖"><a href="#1-1-安装依赖" class="headerlink" title="1.1 安装依赖"></a>1.1 安装依赖</h3><p>要安装最新的Docker版本，首先需要安装apt-transport-https支持，之后通过添加源来安装。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install apt-transport-https ca-certificates</div></pre></td></tr></table></figure></p>
<h3 id="1-2-添加GPG-key"><a href="#1-2-添加GPG-key" class="headerlink" title="1.2 添加GPG key"></a>1.2 添加GPG key</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo apt-key adv \</div><div class="line">               --keyserver hkp://ha.pool.sks-keyservers.net:80 \</div><div class="line">               --recv-keys 58118E89F3A912897C070ADBF76221572C52609D</div></pre></td></tr></table></figure>
<h3 id="1-3-添加对应的源"><a href="#1-3-添加对应的源" class="headerlink" title="1.3 添加对应的源"></a>1.3 添加对应的源</h3><p>源列表</p>
<table>
<thead>
<tr>
<th>Ubuntu version</th>
<th>Repository</th>
</tr>
</thead>
<tbody>
<tr>
<td>Precise 12.04 (LTS)</td>
<td>deb <a href="https://apt.dockerproject.org/repo" target="_blank" rel="external">https://apt.dockerproject.org/repo</a> ubuntu-precise main</td>
</tr>
<tr>
<td>Trusty 14.04 (LTS)</td>
<td>deb <a href="https://apt.dockerproject.org/repo" target="_blank" rel="external">https://apt.dockerproject.org/repo</a> ubuntu-trusty main</td>
</tr>
<tr>
<td>Wily 15.10</td>
<td>deb <a href="https://apt.dockerproject.org/repo" target="_blank" rel="external">https://apt.dockerproject.org/repo</a> ubuntu-wily main</td>
</tr>
<tr>
<td>Xenial 16.04 (LTS)</td>
<td>deb <a href="https://apt.dockerproject.org/repo" target="_blank" rel="external">https://apt.dockerproject.org/repo</a> ubuntu-xenial main</td>
</tr>
</tbody>
</table>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo &quot;&lt;REPO&gt;&quot; | sudo tee /etc/apt/sources.list.d/docker.list</div></pre></td></tr></table></figure>
<h3 id="1-4-更新apt包的index"><a href="#1-4-更新apt包的index" class="headerlink" title="1.4 更新apt包的index"></a>1.4 更新apt包的index</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update</div></pre></td></tr></table></figure>
<h3 id="1-5-安装docker"><a href="#1-5-安装docker" class="headerlink" title="1.5  安装docker"></a>1.5  安装docker</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install docker-engine</div><div class="line">sudo service docker start</div><div class="line">sudo docker run hello-world</div></pre></td></tr></table></figure>
<h2 id="2-CentOS安装"><a href="#2-CentOS安装" class="headerlink" title="2. CentOS安装"></a>2. CentOS安装</h2><h3 id="2-1-更新包"><a href="#2-1-更新包" class="headerlink" title="2.1 更新包"></a>2.1 更新包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo yum update</div></pre></td></tr></table></figure>
<h3 id="2-2-添加yum源"><a href="#2-2-添加yum源" class="headerlink" title="2.2 添加yum源"></a>2.2 添加yum源</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">sudo tee /etc/yum.repos.d/docker.repo &lt;&lt; EOF</div><div class="line">[DockerRepo]</div><div class="line">name=Docker Repository</div><div class="line">baseurl=https://yum.dockerproject.org/repo/main/centos/7/</div><div class="line">enabled=1</div><div class="line">gpgcheck=1</div><div class="line">gpgkey=https://yum.dockerproject.org/gpg</div><div class="line">EOF</div></pre></td></tr></table></figure>
<h3 id="2-3-安装docker包"><a href="#2-3-安装docker包" class="headerlink" title="2.3 安装docker包"></a>2.3 安装docker包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo yum -y install docker-engine</div></pre></td></tr></table></figure>
<h3 id="2-4-开启启动"><a href="#2-4-开启启动" class="headerlink" title="2.4 开启启动"></a>2.4 开启启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo systemctl enable docker.service</div></pre></td></tr></table></figure>
<h3 id="2-5-启动服务"><a href="#2-5-启动服务" class="headerlink" title="2.5 启动服务"></a>2.5 启动服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo systemctl start docker</div></pre></td></tr></table></figure>
<h2 id="3-验证docker是否安装成功"><a href="#3-验证docker是否安装成功" class="headerlink" title="3. 验证docker是否安装成功"></a>3. 验证docker是否安装成功</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">sudo docker run --rm hello-world</div><div class="line"></div><div class="line">Unable to find image &apos;hello-world:latest&apos; locally</div><div class="line"> latest: Pulling from library/hello-world</div><div class="line"> c04b14da8d14: Pull complete</div><div class="line"> Digest: sha256:0256e8a36e2070f7bf2d0b0763dbabdd67798512411de4cdcf9431a1feb60fd9</div><div class="line"> Status: Downloaded newer image for hello-world:latest</div><div class="line"></div><div class="line"> Hello from Docker!</div><div class="line"> This message shows that your installation appears to be working correctly.</div><div class="line"></div><div class="line"> To generate this message, Docker took the following steps:</div><div class="line">  1. The Docker client contacted the Docker daemon.</div><div class="line">  2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub.</div><div class="line">  3. The Docker daemon created a new container from that image which runs the</div><div class="line">     executable that produces the output you are currently reading.</div><div class="line">  4. The Docker daemon streamed that output to the Docker client, which sent it</div><div class="line">     to your terminal.</div><div class="line"></div><div class="line"> To try something more ambitious, you can run an Ubuntu container with:</div><div class="line">  $ docker run -it ubuntu bash</div><div class="line"></div><div class="line"> Share images, automate workflows, and more with a free Docker Hub account:</div><div class="line">  https://hub.docker.com</div><div class="line"></div><div class="line"> For more examples and ideas, visit:</div><div class="line">  https://docs.docker.com/engine/userguide/</div></pre></td></tr></table></figure>
<p><a href="https://github.com/docker/docker" target="_blank" rel="external">docker on github</a><br><a href="https://docs.docker.com/engine/installation/" target="_blank" rel="external">docker install mothed</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-ubuntu通过Docker源安装最新版本&quot;&gt;&lt;a href=&quot;#1-ubuntu通过Docker源安装最新版本&quot; class=&quot;headerlink&quot; title=&quot;1. ubuntu通过Docker源安装最新版本&quot;&gt;&lt;/a&gt;1. ubuntu通过Docke
    
    </summary>
    
    
      <category term="docker" scheme="http://niuzhiqiang90.coding.me/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>linux添加swap</title>
    <link href="http://niuzhiqiang90.coding.me/2017/02/14/linux%E6%B7%BB%E5%8A%A0swap/"/>
    <id>http://niuzhiqiang90.coding.me/2017/02/14/linux添加swap/</id>
    <published>2017-02-14T06:39:33.000Z</published>
    <updated>2017-02-15T05:22:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-swap说明"><a href="#1-swap说明" class="headerlink" title="1. swap说明"></a>1. swap说明</h2><p>物理内存就是计算机的实际内存大小，由RAM芯片组成的。<br>虚拟内存则是虚拟出来的，使用磁盘代替内存。<br>虚拟内存的出现，让机器内存不够的情况得到部分解决。当程序运行起来由操作系统做具体虚拟内存到物理内存的替换和载。这里的虚拟内存就是swap</p>
<p>当物理内存使用完或者达到一定比例之后，我们可以使用swap做临时的内存使用。当物理内存和swap都被使用完那么就会出错，out of memory。</p>
<h2 id="2-使用dd创建swap"><a href="#2-使用dd创建swap" class="headerlink" title="2. 使用dd创建swap"></a>2. 使用dd创建swap</h2><h3 id="2-1-查看当前内存"><a href="#2-1-查看当前内存" class="headerlink" title="2.1 查看当前内存"></a>2.1 查看当前内存</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">×××@localhost: ~$ free -h</div><div class="line">             total       used       free     shared    buffers     cached</div><div class="line">Mem:          7.7G       6.0G       1.6G       875M       476M       3.2G</div><div class="line">-/+ buffers/cache:       2.4G       5.3G</div><div class="line">Swap:         0B         0B       0B</div></pre></td></tr></table></figure>
<h3 id="2-2-创建swap文件"><a href="#2-2-创建swap文件" class="headerlink" title="2.2 创建swap文件"></a>2.2 创建swap文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">×××@localhost: ~$ sudo -s</div><div class="line">root@localhost:~# dd if=/dev/zero of=/mnt/swap_mount_point bs=1M count=2048</div><div class="line">2048+0 records in</div><div class="line">2048+0 records out</div><div class="line">2147483648 bytes (2.1 GB) copied, 16.7229 s, 128 MB/s</div><div class="line"></div><div class="line">root@localhost:~# ls -lh /mnt/swap_mount_point </div><div class="line">-rw-r--r-- 1 root root 2.0G Feb 14 18:08 /mnt/swap_mount_point</div><div class="line"></div><div class="line">root@localhost:~# file /mnt/swap_mount_point </div><div class="line">/mnt/swap_mount_point: data</div></pre></td></tr></table></figure>
<h3 id="2-3-格式化swap文件"><a href="#2-3-格式化swap文件" class="headerlink" title="2.3 格式化swap文件"></a>2.3 格式化swap文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">root@localhost:~# mkswap /mnt/swap_mount_point </div><div class="line">Setting up swapspace version 1, size = 2097148 KiB</div><div class="line">no label, UUID=2ed6629c-4b31-499b-b21d-2235971f8678</div><div class="line">root@localhost:~# file /mnt/swap_mount_point </div><div class="line">/mnt/swap_mount_point: Linux/i386 swap file (new style), version 1 (4K pages), size 524287 pages, no label, UUID=2ed6629c-4b31-499b-b21d-2235971f8678</div></pre></td></tr></table></figure>
<h3 id="2-4-挂载"><a href="#2-4-挂载" class="headerlink" title="2.4 挂载"></a>2.4 挂载</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">root@localhost:~# swapon /mnt/swap_mount_point </div><div class="line">root@localhost:~# free -h</div><div class="line">             total       used       free     shared    buffers     cached</div><div class="line">Mem:          7.7G       7.5G       197M       878M       476M       4.7G</div><div class="line">-/+ buffers/cache:       2.3G       5.3G</div><div class="line">Swap:         2G       264K       2G</div></pre></td></tr></table></figure>
<h3 id="2-5-添加开机启动"><a href="#2-5-添加开机启动" class="headerlink" title="2.5 添加开机启动"></a>2.5 添加开机启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">root@localhost:~# echo &quot;/mnt/swap_mount_point swap swap defaults 0 0&quot; &gt;&gt; /etc/fstab</div></pre></td></tr></table></figure>
<h2 id="3-相关命令"><a href="#3-相关命令" class="headerlink" title="3. 相关命令"></a>3. 相关命令</h2><ul>
<li><p>挂载swap</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">×××@localhost: ~$ swapon /mnt/swap_mount_ponit</div></pre></td></tr></table></figure>
</li>
<li><p>卸载swap</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">×××@localhost: ~$ swapoff /mnt/swap_mount_point</div></pre></td></tr></table></figure>
</li>
<li><p>查看swap使用情况</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">×××@localhost: ~$ swapon -s </div><div class="line">或</div><div class="line">×××@localhost: ~$ cat /proc/swaps</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="4-swap的优化"><a href="#4-swap的优化" class="headerlink" title="4. swap的优化"></a>4. swap的优化</h2><p>在ubuntu中swappiness参数值的大小对如何使用swap分区有很大的关系。<br>swappiness=0 表示最大限度使用物理内存。然后才是swap分区<br>swappiness=100 表示积极地使用swap分区，并把内存上的数据及时地搬运到swap空间上。</p>
<p><strong>swappiness值的修改方法</strong></p>
<ul>
<li><p>方法1</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">×××@localhost: ~$ sudo sysctl vm.swappiness=60</div></pre></td></tr></table></figure>
</li>
<li><p>方法2</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">×××@localhost: ~$ sudo vi /etc/sysctl.conf</div><div class="line">在文件尾添加`vm.swappiness=60`，然后刷新内核参数</div><div class="line">×××@localhost: ~$ sudo sysctl -p</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-swap说明&quot;&gt;&lt;a href=&quot;#1-swap说明&quot; class=&quot;headerlink&quot; title=&quot;1. swap说明&quot;&gt;&lt;/a&gt;1. swap说明&lt;/h2&gt;&lt;p&gt;物理内存就是计算机的实际内存大小，由RAM芯片组成的。&lt;br&gt;虚拟内存则是虚拟出来的，使
    
    </summary>
    
    
      <category term="linux" scheme="http://niuzhiqiang90.coding.me/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu指定默认编辑器</title>
    <link href="http://niuzhiqiang90.coding.me/2017/02/07/ubuntu%E6%8C%87%E5%AE%9A%E9%BB%98%E8%AE%A4%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    <id>http://niuzhiqiang90.coding.me/2017/02/07/ubuntu指定默认编辑器/</id>
    <published>2017-02-07T05:28:17.000Z</published>
    <updated>2017-02-07T05:37:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>ubuntu默认的编辑器为nano，例如执行如下命令时就会使用nano来打开<br><code>sudo visudo</code>或者<code>git commit --amend</code></p>
<p>如果想要设置成默认使用自己习惯的vi，可以执行如下命令进行选择</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ sudo update-alternatives --config editor </div><div class="line">There are 4 choices for the alternative editor (providing /usr/bin/editor).</div><div class="line">  Selection    Path                Priority   Status</div><div class="line">------------------------------------------------------------</div><div class="line">* 0            /bin/nano            40        auto mode</div><div class="line">  1            /bin/ed             -100       manual mode</div><div class="line">  2            /bin/nano            40        manual mode</div><div class="line">  3            /usr/bin/vim.basic   30        manual mode</div><div class="line">  4            /usr/bin/vim.tiny    10        manual mode</div><div class="line">Press enter to keep the current choice[*], or type selection number:</div></pre></td></tr></table></figure>
<p>输入<code>3</code>就可以了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ubuntu默认的编辑器为nano，例如执行如下命令时就会使用nano来打开&lt;br&gt;&lt;code&gt;sudo visudo&lt;/code&gt;或者&lt;code&gt;git commit --amend&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果想要设置成默认使用自己习惯的vi，可以执行如下命令进行选
    
    </summary>
    
    
      <category term="ubuntu" scheme="http://niuzhiqiang90.coding.me/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu修改网卡名称</title>
    <link href="http://niuzhiqiang90.coding.me/2017/02/07/ubuntu%E4%BF%AE%E6%94%B9%E7%BD%91%E5%8D%A1%E5%90%8D%E7%A7%B0/"/>
    <id>http://niuzhiqiang90.coding.me/2017/02/07/ubuntu修改网卡名称/</id>
    <published>2017-02-07T03:21:00.000Z</published>
    <updated>2017-02-07T05:11:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天强迫症又犯了，想要把网卡的名称改为eth0和wlan0<br>按照网上的方法试了几种，都没有成功，下面记录下我修改成功的方法。</p>
<h2 id="1-修改配置文件"><a href="#1-修改配置文件" class="headerlink" title="1. 修改配置文件"></a>1. 修改配置文件</h2><p>Open the file /etc/udev/rules.d/70-persistent-net.rules with your favorite editor.<br>Find the rule matching your MAC address.<br>Change the NAME value from eth1 to eth0 i.e. NAME=”eth0”</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo vi /etc/udev/rules.d/70-persistent-net.rules</div></pre></td></tr></table></figure>
<p>找到你要修改的网卡的MAC，修改对应的<code>NAME</code>值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># PCI device 0x10ec:0x8168 (r8169)</div><div class="line">SUBSYSTEM==&quot;net&quot;, ACTION==&quot;add&quot;, DRIVERS==&quot;?*&quot;, ATTR&#123;address&#125;==&quot;50:7b:9d:55:47:2e&quot;, ATTR&#123;dev_id&#125;==&quot;0x0&quot;, ATTR&#123;type&#125;==&quot;1&quot;, KERNEL==&quot;eth*&quot;, NAME=&quot;eth0&quot;</div><div class="line"> </div><div class="line"># PCI device 0x168c:0x0042 (ath10k_pci)</div><div class="line">SUBSYSTEM==&quot;net&quot;, ACTION==&quot;add&quot;, DRIVERS==&quot;?*&quot;, ATTR&#123;address&#125;==&quot;30:52:cb:68:81:17&quot;, ATTR&#123;dev_id&#125;==&quot;0x0&quot;, ATTR&#123;type&#125;==&quot;1&quot;, KERNEL==&quot;wlan*&quot;, NAME=&quot;wlan0&quot;</div></pre></td></tr></table></figure></p>
<h2 id="2-使修改生效"><a href="#2-使修改生效" class="headerlink" title="2. 使修改生效"></a>2. 使修改生效</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo udevadm trigger</div></pre></td></tr></table></figure>
<p>运行<code>ifconfig</code>查看网卡名称是否已经修改过来，如果没成功，就重启一下吧。</p>
<p><a href="http://askubuntu.com/questions/637591/my-ethernet-interface-name-has-changed-from-eth0-to-eth1" target="_blank" rel="external">From askubuntu</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天强迫症又犯了，想要把网卡的名称改为eth0和wlan0&lt;br&gt;按照网上的方法试了几种，都没有成功，下面记录下我修改成功的方法。&lt;/p&gt;
&lt;h2 id=&quot;1-修改配置文件&quot;&gt;&lt;a href=&quot;#1-修改配置文件&quot; class=&quot;headerlink&quot; title=&quot;1. 
    
    </summary>
    
    
      <category term="ubuntu" scheme="http://niuzhiqiang90.coding.me/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>python指定字符编码</title>
    <link href="http://niuzhiqiang90.coding.me/2017/02/07/python%E6%8C%87%E5%AE%9A%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/"/>
    <id>http://niuzhiqiang90.coding.me/2017/02/07/python指定字符编码/</id>
    <published>2017-02-07T01:37:14.000Z</published>
    <updated>2017-02-07T05:08:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>python指定字符编码的方式有多种<br><strong>编码格式是要写在解释器的下面的</strong></p>
<h2 id="1-指定方法"><a href="#1-指定方法" class="headerlink" title="1.指定方法"></a>1.指定方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env python</div><div class="line"># _*_ coding:utf-8 _*_</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env python</div><div class="line"># -*- coding:utf-8 -*-</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env python</div><div class="line"># coding:utf-8</div></pre></td></tr></table></figure>
<h2 id="2-使用场景"><a href="#2-使用场景" class="headerlink" title="2.使用场景"></a>2.使用场景</h2><ul>
<li>在python的程序中，如果有中文字符需要指定字符编码方式，无论是否是在注释中。</li>
<li>在数据库操作中，读取或者写入的内容中有汉字时。具体的方法如下:<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env python</div><div class="line"># _*_ coding:utf-8 _*_</div><div class="line"></div><div class="line">import sys</div><div class="line">reload(sys)                                                                      </div><div class="line">sys.setdefaultencoding(&apos;utf8&apos;)</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;python指定字符编码的方式有多种&lt;br&gt;&lt;strong&gt;编码格式是要写在解释器的下面的&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-指定方法&quot;&gt;&lt;a href=&quot;#1-指定方法&quot; class=&quot;headerlink&quot; title=&quot;1.指定方法&quot;&gt;&lt;/a&gt;1.指定方法
    
    </summary>
    
    
      <category term="python" scheme="http://niuzhiqiang90.coding.me/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu安装powerline字体</title>
    <link href="http://niuzhiqiang90.coding.me/2017/01/22/ubuntu%E5%AE%89%E8%A3%85powerline%E5%AD%97%E4%BD%93/"/>
    <id>http://niuzhiqiang90.coding.me/2017/01/22/ubuntu安装powerline字体/</id>
    <published>2017-01-22T06:25:10.000Z</published>
    <updated>2017-01-24T08:15:33.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-下载powerline字体和配置文件"><a href="#1-下载powerline字体和配置文件" class="headerlink" title="1.下载powerline字体和配置文件"></a>1.下载powerline字体和配置文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ wget https://github.com/powerline/powerline/raw/develop/font/PowerlineSymbols.otf</div><div class="line">$ wget https://github.com/powerline/powerline/raw/develop/font/10-powerline-symbols.conf</div></pre></td></tr></table></figure>
<h2 id="2-将字体放到字体目录中"><a href="#2-将字体放到字体目录中" class="headerlink" title="2.将字体放到字体目录中"></a>2.将字体放到字体目录中</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo mv ./PowerlineSymbols.otf /usr/local/share/fonts</div></pre></td></tr></table></figure>
<h2 id="3-更新字体缓存"><a href="#3-更新字体缓存" class="headerlink" title="3.更新字体缓存"></a>3.更新字体缓存</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ fc-cache -vf /usr/share/fonts/</div></pre></td></tr></table></figure>
<h2 id="4-添加字体配置文件"><a href="#4-添加字体配置文件" class="headerlink" title="4.添加字体配置文件"></a>4.添加字体配置文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo mv 10-powerline-symbols.conf /etc/fonts/conf.d/</div></pre></td></tr></table></figure>
<p>这样vim中的powerline字体就能够正确显示了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-下载powerline字体和配置文件&quot;&gt;&lt;a href=&quot;#1-下载powerline字体和配置文件&quot; class=&quot;headerlink&quot; title=&quot;1.下载powerline字体和配置文件&quot;&gt;&lt;/a&gt;1.下载powerline字体和配置文件&lt;/h2&gt;&lt;
    
    </summary>
    
    
      <category term="vim插件" scheme="http://niuzhiqiang90.coding.me/tags/vim%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu安装为知笔记</title>
    <link href="http://niuzhiqiang90.coding.me/2017/01/20/ubuntu%E5%AE%89%E8%A3%85%E4%B8%BA%E7%9F%A5%E7%AC%94%E8%AE%B0/"/>
    <id>http://niuzhiqiang90.coding.me/2017/01/20/ubuntu安装为知笔记/</id>
    <published>2017-01-20T07:38:17.000Z</published>
    <updated>2017-01-20T08:00:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天在ubunu上重新安装wiznote时，发现<a href="http://www.wiz.cn/wiznote-linux.html" target="_blank" rel="external">官方</a>提供的方法只能编译安装，无奈步骤繁琐。接着我尝试了之前的安装方法，发现会报错。</p>
<h2 id="1-添加软件源来安装"><a href="#1-添加软件源来安装" class="headerlink" title="1.添加软件源来安装"></a>1.添加软件源来安装</h2><p>ubuntu下可以通过软件源来进行安装，命令如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ sudo add-apt-repository ppa:wiznote-team</div><div class="line">$ sudo apt-get update</div><div class="line">$ sudo apt-get install wiznote</div></pre></td></tr></table></figure></p>
<p>在更新时，会报<code>Hash Sum mismatch</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">W: Failed to fetch http://ppa.launchpad.net/wiznote-team/ppa/ubuntu/dists/trusty/main/binary-amd64/Packages  Hash Sum mismatch</div><div class="line">W: Failed to fetch http://ppa.launchpad.net/wiznote-team/ppa/ubuntu/dists/trusty/main/binary-i386/Packages  Hash Sum mismatch</div><div class="line">W: Failed to fetch http://ppa.launchpad.net/wiznote-team/ppa/ubuntu/dists/trusty/main/i18n/Translation-en  Hash Sum mismatch</div></pre></td></tr></table></figure></p>
<p>所以再执行install命令也会失败！！</p>
<h2 id="2-直接从软件源上下载安装包"><a href="#2-直接从软件源上下载安装包" class="headerlink" title="2.直接从软件源上下载安装包"></a>2.直接从软件源上下载安装包</h2><h3 id="2-1-下载"><a href="#2-1-下载" class="headerlink" title="2.1 下载"></a>2.1 下载</h3><p>执行如下命令时<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo add-apt-repository ppa:wiznote-team</div></pre></td></tr></table></figure></p>
<p>会输出如下日志<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> The code is hosted here: https://github.com/WizTeam/WizQTClient</div><div class="line">visit our homepage for detailed info: http://www.wiznote.cn/</div><div class="line">Any questions and bugs report to: &lt;email address hidden&gt;</div><div class="line">The binary name is WizNote. Please use WizNote to start program in cmd.</div><div class="line"> More info: https://launchpad.net/~wiznote-team/+archive/ubuntu/ppa</div><div class="line">Press [ENTER] to continue or ctrl-c to cancel adding it</div></pre></td></tr></table></figure></p>
<p>打开<a href="https://launchpad.net/~wiznote-team/+archive/ubuntu/ppa" target="_blank" rel="external">最后一个链接</a>之后，点击 <a href="https://launchpad.net/~wiznote-team/+archive/ubuntu/ppa/+packages" target="_blank" rel="external">View package details</a> 就会跳转到如下页面<br><a href="https://launchpad.net/~wiznote-team/+archive/ubuntu/ppa/+packages" target="_blank" rel="external">https://launchpad.net/~wiznote-team/+archive/ubuntu/ppa/+packages</a>  点击其中的版本，下载相应的deb包。</p>
<h3 id="2-2安装方法"><a href="#2-2安装方法" class="headerlink" title="2.2安装方法"></a>2.2安装方法</h3><ul>
<li>方法1<br>双击下载文件，使用软件中心安装  </li>
<li>方法2<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dpkg -i xxx.deb</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在ubunu上重新安装wiznote时，发现&lt;a href=&quot;http://www.wiz.cn/wiznote-linux.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方&lt;/a&gt;提供的方法只能编译安装，无奈步骤繁琐。接着我尝试了之前的安
    
    </summary>
    
    
      <category term="ubuntu" scheme="http://niuzhiqiang90.coding.me/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>tmux安装配置使用</title>
    <link href="http://niuzhiqiang90.coding.me/2017/01/19/tmux%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E4%BD%BF%E7%94%A8/"/>
    <id>http://niuzhiqiang90.coding.me/2017/01/19/tmux安装配置使用/</id>
    <published>2017-01-19T08:35:05.000Z</published>
    <updated>2017-01-19T08:46:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># ubuntu</div><div class="line">sudo apt-get install tmux</div></pre></td></tr></table></figure>
<p>或者<br><a href="https://github.com/tmux/tmux/releases/download/2.3/tmux-2.3.tar.gz" target="_blank" rel="external">点击下载tmux安装包</a></p>
<h2 id="2-配置文件"><a href="#2-配置文件" class="headerlink" title="2.配置文件"></a>2.配置文件</h2><p>~/.tmux.conf<br>如果文件不存在直接<code>touch</code>就可以。<br><strong>下面是我的配置文件</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">unbind C-b</div><div class="line">set -g prefix C-a</div><div class="line">bind C-a send-prefix</div><div class="line"></div><div class="line">bind r source-file ~/.tmux.conf \; display &quot;tmux.conf reload!&quot;</div><div class="line"></div><div class="line">bind | split-window -h</div><div class="line">bind - split-window -v</div><div class="line"></div><div class="line">bind h select-pane -L</div><div class="line">bind j select-pane -D</div><div class="line">bind k select-pane -U</div><div class="line">bind l select-pane -R</div><div class="line"></div><div class="line"></div><div class="line">/*bind -n C-x setw synchronize-panes */</div><div class="line">bind C-e command-prompt -p &quot;session?,message?&quot; &quot;run-shell \&quot;tmux list-windows -t %1 \| cut -d: -f1\|xargs -I\&#123;\&#125; tmux send-keys -t %1:\&#123;\&#125; %2\&quot;&quot;</div><div class="line"></div><div class="line">set -g base-index 1</div><div class="line">set -g pane-base-index 1</div><div class="line"></div><div class="line">set -g status-fg white</div><div class="line">set -g status-bg black</div><div class="line"></div><div class="line">setw -g window-status-fg cyan</div><div class="line">setw -g window-status-bg default</div><div class="line">setw -g window-status-attr dim</div><div class="line"></div><div class="line">setw -g window-status-current-fg white</div><div class="line">setw -g window-status-current-bg red</div><div class="line">setw -g window-status-current-attr bright</div><div class="line"></div><div class="line">set -g message-fg green</div><div class="line">set -g message-bg black</div><div class="line">set -g message-attr bright</div><div class="line"></div><div class="line">set -g status-left &quot;#[fg=green]#S #[fg=yellow]#I #[fg=cyan]#P&quot;</div><div class="line">set -g status-left-length 40</div><div class="line">set -g status-left &quot;#[fg=green]Session: #S #[fg=yellow]#I #[fg=cyan]#P&quot;</div><div class="line">set -g status-right &quot;#[fg=cyan]%d %b %R&quot;</div><div class="line">set -g status-utf8 on</div><div class="line"></div><div class="line">set -g status-interval 60</div><div class="line">set -g status-justify centre</div><div class="line"></div><div class="line">setw -g monitor-activity on</div><div class="line">set -g visual-activity on</div><div class="line"></div><div class="line">setw -g mode-keys vi</div></pre></td></tr></table></figure></p>
<h2 id="3-tmux部分快捷键"><a href="#3-tmux部分快捷键" class="headerlink" title="3.tmux部分快捷键"></a>3.tmux部分快捷键</h2><table>
<thead>
<tr>
<th>按键</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Ctrl+a ?</td>
<td>列出所有快捷键</td>
</tr>
<tr>
<td>Ctrl+a c</td>
<td>新建窗口</td>
</tr>
<tr>
<td>Ctrl+a 数字</td>
<td>切换到对应的窗口</td>
</tr>
<tr>
<td>Ctrl+a n</td>
<td>切换到下一个窗口</td>
</tr>
<tr>
<td>Ctrl+a p</td>
<td>切换到上一个窗口</td>
</tr>
<tr>
<td>Ctrl+a w</td>
<td>列出所有窗口</td>
</tr>
<tr>
<td>Ctrl+a f</td>
<td>查找窗口</td>
</tr>
<tr>
<td>Ctrl+a ,</td>
<td>修改该窗口的名字</td>
</tr>
<tr>
<td>Ctrl+a %/竖线</td>
<td>垂直分隔窗口</td>
</tr>
<tr>
<td>Ctrl+a “/-</td>
<td>水平分隔窗口</td>
</tr>
<tr>
<td>Ctrl+a o</td>
<td>交换光标所在窗格</td>
</tr>
<tr>
<td>Ctrl+a x</td>
<td>关闭窗格</td>
</tr>
<tr>
<td>Ctrl+a 空格</td>
<td>切换布局</td>
</tr>
<tr>
<td>Ctrl+a q</td>
<td>显示每个窗格是第几个，当数字出现时按数字就选中第几个窗格</td>
</tr>
<tr>
<td>Ctrl+a {</td>
<td>与上一个窗格交换位置</td>
</tr>
<tr>
<td>Ctrl+a }</td>
<td>与下一个窗格交换位置</td>
</tr>
<tr>
<td>Ctrl+a z</td>
<td>切换当前窗格最大化/最小化</td>
</tr>
<tr>
<td>Ctrl+a [</td>
<td>进入复制模式</td>
</tr>
<tr>
<td>Ctrl+a [ 空格</td>
<td>开始选择内容 回车复制</td>
</tr>
<tr>
<td>Ctrl+a ]</td>
<td>粘贴</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-安装&quot;&gt;&lt;a href=&quot;#1-安装&quot; class=&quot;headerlink&quot; title=&quot;1.安装&quot;&gt;&lt;/a&gt;1.安装&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
    
    </summary>
    
    
      <category term="tmux" scheme="http://niuzhiqiang90.coding.me/tags/tmux/"/>
    
  </entry>
  
</feed>
